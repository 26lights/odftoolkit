/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008, 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */
package org.odftoolkit.odfdom.dom.element.office;

import org.odftoolkit.odfdom.pkg.OdfElement;
import org.odftoolkit.odfdom.pkg.ElementVisitor;
import org.odftoolkit.odfdom.pkg.OdfFileDom;
import org.odftoolkit.odfdom.pkg.OdfName;
import org.odftoolkit.odfdom.dom.OdfDocumentNamespace;
import org.odftoolkit.odfdom.dom.DefaultElementVisitor;
import org.odftoolkit.odfdom.dom.element.draw.DrawLayerSetElement;
import org.odftoolkit.odfdom.dom.element.style.StyleHandoutMasterElement;
import org.odftoolkit.odfdom.dom.element.style.StyleMasterPageElement;
import org.odftoolkit.odfdom.dom.element.table.TableTableTemplateElement;
import org.odftoolkit.odfdom.pkg.OdfContainerElementBase;

/**
 * DOM implementation of OpenDocument element  {@odf.element office:master-styles}.
 *
 */
public class OfficeMasterStylesElement extends OdfContainerElementBase {

	public static final OdfName ELEMENT_NAME = OdfName.newName(OdfDocumentNamespace.OFFICE, "master-styles");

	/**
	 * Create the instance of <code>OfficeMasterStylesElement</code>
	 *
	 * @param  ownerDoc     The type is <code>OdfFileDom</code>
	 */
	public OfficeMasterStylesElement(OdfFileDom ownerDoc) {
		super(ownerDoc, ELEMENT_NAME);
	}

	/**
	 * Get the element name
	 *
	 * @return  return   <code>OdfName</code> the name of element {@odf.element office:master-styles}.
	 */
	public OdfName getOdfName() {
		return ELEMENT_NAME;
	}

	/**
	 * Create child element {@odf.element draw:layer-set}.
	 *
	 * @return the element {@odf.element draw:layer-set}
	 */
	public DrawLayerSetElement newDrawLayerSetElement() {
		DrawLayerSetElement drawLayerSet = ((OdfFileDom) this.ownerDocument).newOdfElement(DrawLayerSetElement.class);
		this.appendChild(drawLayerSet);
		return drawLayerSet;
	}

	/**
	 * Create child element {@odf.element style:handout-master}.
	 *
	 * @param stylePageLayoutNameValue  the <code>String</code> value of <code>StylePageLayoutNameAttribute</code>, see {@odf.attribute  style:page-layout-name} at specification
	 * @return the element {@odf.element style:handout-master}
	 */
	 public StyleHandoutMasterElement newStyleHandoutMasterElement(String stylePageLayoutNameValue) {
		StyleHandoutMasterElement styleHandoutMaster = ((OdfFileDom) this.ownerDocument).newOdfElement(StyleHandoutMasterElement.class);
		styleHandoutMaster.setStylePageLayoutNameAttribute(stylePageLayoutNameValue);
		this.appendChild(styleHandoutMaster);
		return styleHandoutMaster;
	}

	/**
	 * Create child element {@odf.element style:master-page}.
	 *
	 * @param styleNameValue  the <code>String</code> value of <code>StyleNameAttribute</code>, see {@odf.attribute  style:name} at specification
	 * @param stylePageLayoutNameValue  the <code>String</code> value of <code>StylePageLayoutNameAttribute</code>, see {@odf.attribute  style:page-layout-name} at specification
	 * @return the element {@odf.element style:master-page}
	 */
	 public StyleMasterPageElement newStyleMasterPageElement(String styleNameValue, String stylePageLayoutNameValue) {
		StyleMasterPageElement styleMasterPage = ((OdfFileDom) this.ownerDocument).newOdfElement(StyleMasterPageElement.class);
		styleMasterPage.setStyleNameAttribute(styleNameValue);
		styleMasterPage.setStylePageLayoutNameAttribute(stylePageLayoutNameValue);
		this.appendChild(styleMasterPage);
		return styleMasterPage;
	}

	/**
	 * Create child element {@odf.element table:table-template}.
	 *
	 * @param tableFirstRowEndColumnValue  the <code>String</code> value of <code>TableFirstRowEndColumnAttribute</code>, see {@odf.attribute  table:first-row-end-column} at specification
	 * @param tableFirstRowStartColumnValue  the <code>String</code> value of <code>TableFirstRowStartColumnAttribute</code>, see {@odf.attribute  table:first-row-start-column} at specification
	 * @param tableLastRowEndColumnValue  the <code>String</code> value of <code>TableLastRowEndColumnAttribute</code>, see {@odf.attribute  table:last-row-end-column} at specification
	 * @param tableLastRowStartColumnValue  the <code>String</code> value of <code>TableLastRowStartColumnAttribute</code>, see {@odf.attribute  table:last-row-start-column} at specification
	 * @param tableNameValue  the <code>String</code> value of <code>TableNameAttribute</code>, see {@odf.attribute  table:name} at specification
	 * Child element is new in Odf 1.2
	 *
	 * @return the element {@odf.element table:table-template}
	 */
	 public TableTableTemplateElement newTableTableTemplateElement(String tableFirstRowEndColumnValue, String tableFirstRowStartColumnValue, String tableLastRowEndColumnValue, String tableLastRowStartColumnValue, String tableNameValue) {
		TableTableTemplateElement tableTableTemplate = ((OdfFileDom) this.ownerDocument).newOdfElement(TableTableTemplateElement.class);
		tableTableTemplate.setTableFirstRowEndColumnAttribute(tableFirstRowEndColumnValue);
		tableTableTemplate.setTableFirstRowStartColumnAttribute(tableFirstRowStartColumnValue);
		tableTableTemplate.setTableLastRowEndColumnAttribute(tableLastRowEndColumnValue);
		tableTableTemplate.setTableLastRowStartColumnAttribute(tableLastRowStartColumnValue);
		tableTableTemplate.setTableNameAttribute(tableNameValue);
		this.appendChild(tableTableTemplate);
		return tableTableTemplate;
	}

	@Override
	public void accept(ElementVisitor visitor) {
		if (visitor instanceof DefaultElementVisitor) {
			DefaultElementVisitor defaultVisitor = (DefaultElementVisitor) visitor;
			defaultVisitor.visit(this);
		} else {
			visitor.visit(this);
		}
	}
}
