## Template to create the list of artefacts which are to be generated
##
## Documentation of template development can be found in local file
## TemplateHelp.html.
##
## Returns PuzzleComponent covering a PuzzlePiece or PuzzlePieceSet dependent if attribute is multiple times defined
#set($attribute = $model.getAttribute($context))
#set($NS = $attribute.getNamespace())
#set($localname = ${model.extractLocalname($attribute)})
#set($classname = "${model.camelCase($attribute)}Attribute" )
##
##2DO: Svante - getValues() vs. getValueLiterals() - only literals / constants for attribute values are taken
#set($values = ${attribute.getValues().withoutMultiples()})
#if ($values.size() > 0)
#set ($enum = true)
#else
#set ($enum = false)
#end
##
#set($datatypes = ${attribute.getDatatypes().withoutMultiples()})
#if ($datatypes.size() > 0)
#set ($hasdatatype = true)
#else
#set ($hasdatatype = false)
#end
##
#include('copyright.txt')
/*
 * This file is automatically generated.
 * Don't edit manually.
 */
package org.odftoolkit.odfdom.dom.attribute.${NS};

import org.odftoolkit.odfdom.pkg.OdfFileDom;
import org.odftoolkit.odfdom.pkg.OdfName;
import org.odftoolkit.odfdom.pkg.OdfNamespace;
import org.odftoolkit.odfdom.dom.OdfDocumentNamespace;
import org.odftoolkit.odfdom.pkg.OdfAttribute;

#foreach ( $parent in ${attribute.getParents().withoutMultiples()} )
#if ( $odfmodel.getDefaultAttributeValue($attribute, $parent) )
import org.odftoolkit.odfdom.dom.element.${parent.getNamespace()}.${model.camelCase($parent)}Element;
#end
#end
/**
 * DOM implementation of OpenDocument attribute  {@odf.attribute ${attribute.getQName()}}.
 *
 */
public class $classname extends OdfAttribute {

	public static final OdfName ATTRIBUTE_NAME = OdfName.newName( OdfDocumentNamespace.${NS.toUpperCase()}, "$localname" );

	/**
	 * Create the instance of OpenDocument attribute {@odf.attribute ${attribute}}.
	 * 
	 * @param ownerDocument       The type is <code>OdfFileDom</code>
	 */
	public $classname(OdfFileDom ownerDocument) {
		super(ownerDocument, ATTRIBUTE_NAME);
	}
	
	/**
	 * Returns the attribute name.
	 * 
	 * @return the <code>OdfName</code> for {@odf.attribute ${attribute}}.
	 */
	@Override
	public OdfName getOdfName() {
		return ATTRIBUTE_NAME;
	}
	
	/**
	 * @return Returns the name of this attribute.
	 */
	@Override
	public String getName() {
		return ATTRIBUTE_NAME.getLocalName();
	}
##
#if($enum)
	
	/**
	 * The value set of {@odf.attribute ${attribute}}.
	 */
	public enum Value {
#set ($separator="")
#foreach($value in $values)
#if (${value.toString().length()} == 1)
#set ($constant = $value)
#else
#set ($constant = $model.constantCase($value))
#end${separator}${model.escapeKeyword($constant)}( "${model.escapeLiteral($value)}" )#set ($separator=", ")
#end ;
              
		private String mValue;

		Value( String value ) {
			mValue = value;
		}
	 	
		@Override
		public String toString() {
			return mValue;
		}
		
		public static Value enumValueOf( String value ) {
			for( Value aIter : values() ) {
			    if( value.equals( aIter.toString() ) ) {
				return aIter;
			    }
			}
			return null;
		}
	}
	 
	/**
	 * @param attrValue The <code>Enum</code> value of the attribute.
	 */
	public void setEnumValue(Value attrValue) {
		setValue(attrValue.toString());
	}
    
	/**
	 * @return Returns the <code>Enum</code> value of the attribute
	 */
	public Value getEnumValue(){
		return Value.enumValueOf(this.getValue());
	}

#end
##
## Handle Non-String-Attributes
#set ( $valuetypes = ${javamodel.getValuetypes($datatypes)} )
#if ( ${valuetypes.size()} == 1 && ${valuetypes.get(0)} && ${valuetypes.get(0)} != "String" )
#set ( $valueobject = ${valuetypes.get(0)} )
#set ( $simplevalue = ${javamodel.getPrimitiveType($valueobject)} )
##
	/**
	 * @param value The <code>${simplevalue}</code> value of the attribute.
	 */
	public void set${model.camelCase($simplevalue)}Value")}(${simplevalue} value) {
 		super.setValue(String.valueOf(value));
	}
    
	/**
	 * @return Returns the <code>${simplevalue}</code> value of the attribute
	 */
	public ${simplevalue} ${simplevalue}Value(){
		String value = super.getValue();
		try {
			return ${valueobject}.parse${model.camelCase($simplevalue)}(value);
		} catch (NumberFormatException e) {
			// TODO: validation handling/logging
			throw (e);
		}
	}

##
#else
#set( $valueobject = "String" )
#end
##
##
	/**
	 * @param attrValue The <code>String</code> value of the attribute.
	 * @throws IllegalArgumentException If the provided attribute value is invalid
	 */
	@Override
	public void setValue(String attrValue) {
#if ( $enum )
#if ( $hasdatatype )
		## enum and datatype
		// Since we have not only enumValues, but also a DataType, we use String as common base and don't validate.
		super.setValue(attrValue);	
#else 
		## enum and no datatype
		try {
			super.setValue(Value.enumValueOf(attrValue).toString());	
		} catch (NullPointerException e) {
			throw new IllegalArgumentException(e);
		}
#end
#else
#if ( $valueobject == "String" )
		## no enum and none or String datatype
		try{
			super.setValue(attrValue);	
		}  catch (NullPointerException e) {
			// TODO: validation handling/logging
			throw new IllegalArgumentException(e);
		} catch (IllegalArgumentException e) {
			// TODO: validation handling/logging
			throw (e);
		}
#else
## no enum and special datatype != String
		try {
			super.setValue(${valueobject}.toString(${valueobject}.parse${model.camelCase($simplevalue)}(attrValue)));
		} catch (NumberFormatException e) {
			throw new IllegalArgumentException(e);
		}
#end
#end
	}

	/**
	 * @return Returns the <code>String</code> value of the attribute
	 */
	@Override
	public String getValue(){
#if ( $enum )
#if ( $hasdatatype )
## enum and datatype
		// Since we have not only enumValues, but also a DataType, we use String as common base and don't validate.
		return super.getValue();		
#else 
## enum and no datatype
		try {
			return Value.enumValueOf(super.getValue()).toString();		
		} catch (NullPointerException e) {
			throw new IllegalArgumentException("the value of ${attribute} is not valid");
		}
#end
#else
#if ( $valueobject == "String" )
## no enum and none or String datatype
		try{
			return super.getValue();		
		} catch (IllegalArgumentException e) {
			// TODO: validation handling/logging
			throw new NumberFormatException("the value of ${attribute} is not valid");
		}	
#else
## no enum and special datatype != String
		try {
			return String.valueOf(Integer.parseInt(super.getValue()));		
		} catch (NumberFormatException e) {
			throw new IllegalArgumentException("the value of ${attribute} is not valid");
		}
#end
#end
	}

	/**
	 * Returns the default value of {@odf.attribute ${attribute}}.
	 * 
	 * @return the default value as <code>String</code> dependent of its element name
	 *         return <code>null</code> if the default value does not exist
	 */
	@Override
	public String getDefault() {
#foreach ( $parent in ${attribute.getParents().withoutMultiples()} )
#if ( $odfmodel.getDefaultAttributeValue($attribute, $parent) )
		if (owner instanceof ${model.camelCase($parent)}Element) {
			return "${model.escapeLiteral($odfmodel.getDefaultAttributeValue($attribute, $parent))}";
		}
#end
#end
		return null;
	}

	/**
	 * Default value indicator. As the attribute default value is dependent from its element, the attribute has only a default, when a parent element exists.
	 * 
	 * @return <code>true</code> if {@odf.attribute ${attribute}} has an element parent 
	 *         otherwise return <code>false</code> as undefined.
	 */
	@Override
	public boolean hasDefault() {
#foreach ( $parent in ${attribute.getParents().withoutMultiples()} )
#if ( ${odfmodel.getDefaultAttributeValue($attribute, $parent)} )
		if (owner instanceof ${model.camelCase($parent)}Element) {
			return true;
		}
#end
#end
		return false;
	}
	
	/**
	 * @return Returns whether this attribute is known to be of type ID (i.e. xml:id ?)
	 */
	@Override
	public boolean isId() {
		return false;

	}
}
