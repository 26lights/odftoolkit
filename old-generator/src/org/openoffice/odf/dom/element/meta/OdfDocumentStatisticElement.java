/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * Use is subject to license terms.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.openoffice.odf.dom.element.meta;

import org.openoffice.odf.dom.OdfName;
import org.openoffice.odf.dom.OdfNamespace;
import org.openoffice.odf.doc.OdfFileDom;
import org.openoffice.odf.dom.element.OdfElement;
import org.openoffice.odf.dom.type.OdfNonNegativeInteger;


/**
 * ODF DOM Element implementation for element "<meta:document-statistic>".
 */
public abstract class OdfDocumentStatisticElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.META, "document-statistic" );

    public OdfDocumentStatisticElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }


    /**
     * Get value of attribute "meta:page-count".
     */
    public Integer getPageCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "page-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:page-count".
     */
    public void setPageCount( Integer _aPageCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aPageCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "page-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:table-count".
     */
    public Integer getTableCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "table-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:table-count".
     */
    public void setTableCount( Integer _aTableCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aTableCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "table-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:draw-count".
     */
    public Integer getDrawCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "draw-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:draw-count".
     */
    public void setDrawCount( Integer _aDrawCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aDrawCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "draw-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:image-count".
     */
    public Integer getImageCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "image-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:image-count".
     */
    public void setImageCount( Integer _aImageCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aImageCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "image-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:ole-object-count".
     */
    public Integer getOleObjectCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "ole-object-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:ole-object-count".
     */
    public void setOleObjectCount( Integer _aOleObjectCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aOleObjectCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "ole-object-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:object-count".
     */
    public Integer getObjectCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "object-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:object-count".
     */
    public void setObjectCount( Integer _aObjectCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aObjectCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "object-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:paragraph-count".
     */
    public Integer getParagraphCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "paragraph-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:paragraph-count".
     */
    public void setParagraphCount( Integer _aParagraphCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aParagraphCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "paragraph-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:word-count".
     */
    public Integer getWordCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "word-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:word-count".
     */
    public void setWordCount( Integer _aWordCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aWordCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "word-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:character-count".
     */
    public Integer getCharacterCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "character-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:character-count".
     */
    public void setCharacterCount( Integer _aCharacterCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aCharacterCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "character-count" ), aStringVal );
    }

    /**
     * Get value of attribute "frame-count".
     */
    public Integer getFrameCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( "", "frame-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "frame-count".
     */
    public void setFrameCount( Integer _aFrameCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aFrameCount );
        setOdfAttribute( OdfName.get( "", "frame-count" ), aStringVal );
    }

    /**
     * Get value of attribute "sentence-count".
     */
    public Integer getSentenceCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( "", "sentence-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "sentence-count".
     */
    public void setSentenceCount( Integer _aSentenceCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aSentenceCount );
        setOdfAttribute( OdfName.get( "", "sentence-count" ), aStringVal );
    }

    /**
     * Get value of attribute "syllable-count".
     */
    public Integer getSyllableCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( "", "syllable-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "syllable-count".
     */
    public void setSyllableCount( Integer _aSyllableCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aSyllableCount );
        setOdfAttribute( OdfName.get( "", "syllable-count" ), aStringVal );
    }

    /**
     * Get value of attribute "non-whitespace-character-count".
     */
    public Integer getNonWhitespaceCharacterCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( "", "non-whitespace-character-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "non-whitespace-character-count".
     */
    public void setNonWhitespaceCharacterCount( Integer _aNonWhitespaceCharacterCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aNonWhitespaceCharacterCount );
        setOdfAttribute( OdfName.get( "", "non-whitespace-character-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:row-count".
     */
    public Integer getRowCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "row-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:row-count".
     */
    public void setRowCount( Integer _aRowCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aRowCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "row-count" ), aStringVal );
    }

    /**
     * Get value of attribute "meta:cell-count".
     */
    public Integer getCellCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.META, "cell-count" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "meta:cell-count".
     */
    public void setCellCount( Integer _aCellCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aCellCount );
        setOdfAttribute( OdfName.get( OdfNamespace.META, "cell-count" ), aStringVal );
    }

}
