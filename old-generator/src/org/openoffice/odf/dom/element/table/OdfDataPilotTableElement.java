/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * Use is subject to license terms.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.openoffice.odf.dom.element.table;

import org.openoffice.odf.dom.OdfName;
import org.openoffice.odf.dom.OdfNamespace;
import org.openoffice.odf.doc.OdfFileDom;
import org.openoffice.odf.dom.element.OdfElement;
import org.openoffice.odf.dom.type.table.OdfGrandTotalType;
import org.openoffice.odf.dom.type.OdfBoolean;
import org.openoffice.odf.dom.type.OdfCellRangeAddressList;


/**
 * ODF DOM Element implementation for element "<table:data-pilot-table>".
 */
public abstract class OdfDataPilotTableElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.TABLE, "data-pilot-table" );

    public OdfDataPilotTableElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Initialite mandatory attributes.
     */
    public void init(String _aName, String _aTargetRangeAddress)
    {
        setName( _aName );
        setTargetRangeAddress( _aTargetRangeAddress );
    }

    /**
     * Get value of attribute "table:name".
     */
    public String getName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "name" ) );
    }

    /**
     * Set value of attribute "table:name".
     */
    public void setName( String _aName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "name" ), _aName );
    }

    /**
     * Get value of attribute "table:application-data".
     */
    public String getApplicationData()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "application-data" ) );
    }

    /**
     * Set value of attribute "table:application-data".
     */
    public void setApplicationData( String _aApplicationData )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "application-data" ), _aApplicationData );
    }

    /**
     * Get value of attribute "table:grand-total".
     */
    public OdfGrandTotalType getGrandTotal()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "grand-total" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "both";
        }

        return OdfGrandTotalType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:grand-total".
     */
    public void setGrandTotal( OdfGrandTotalType _aGrandTotal )
    {                    
        String aStringVal = OdfGrandTotalType.toString( _aGrandTotal );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "grand-total" ), aStringVal );
    }

    /**
     * Get value of attribute "table:ignore-empty-rows".
     */
    public Boolean getIgnoreEmptyRows()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "ignore-empty-rows" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:ignore-empty-rows".
     */
    public void setIgnoreEmptyRows( Boolean _aIgnoreEmptyRows )
    {                    
        String aStringVal = OdfBoolean.toString( _aIgnoreEmptyRows );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "ignore-empty-rows" ), aStringVal );
    }

    /**
     * Get value of attribute "table:identify-categories".
     */
    public Boolean getIdentifyCategories()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "identify-categories" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:identify-categories".
     */
    public void setIdentifyCategories( Boolean _aIdentifyCategories )
    {                    
        String aStringVal = OdfBoolean.toString( _aIdentifyCategories );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "identify-categories" ), aStringVal );
    }

    /**
     * Get value of attribute "table:target-range-address".
     */
    public String getTargetRangeAddress()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "target-range-address" ) );
    }

    /**
     * Set value of attribute "table:target-range-address".
     */
    public void setTargetRangeAddress( String _aTargetRangeAddress )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "target-range-address" ), _aTargetRangeAddress );
    }

    /**
     * Get value of attribute "table:buttons".
     */
    public String getButtons()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "buttons" ) );
        return OdfCellRangeAddressList.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:buttons".
     */
    public void setButtons( String _aButtons )
    {                    
        String aStringVal = OdfCellRangeAddressList.toString( _aButtons );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "buttons" ), aStringVal );
    }

    /**
     * Get value of attribute "table:show-filter-button".
     */
    public Boolean getShowFilterButton()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "show-filter-button" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:show-filter-button".
     */
    public void setShowFilterButton( Boolean _aShowFilterButton )
    {                    
        String aStringVal = OdfBoolean.toString( _aShowFilterButton );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "show-filter-button" ), aStringVal );
    }

    /**
     * Get value of attribute "table:drill-down-on-double-click".
     */
    public Boolean getDrillDownOnDoubleClick()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "drill-down-on-double-click" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:drill-down-on-double-click".
     */
    public void setDrillDownOnDoubleClick( Boolean _aDrillDownOnDoubleClick )
    {                    
        String aStringVal = OdfBoolean.toString( _aDrillDownOnDoubleClick );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "drill-down-on-double-click" ), aStringVal );
    }

}
