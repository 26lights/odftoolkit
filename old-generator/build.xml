<?xml version="1.0" encoding="UTF-8"?>
<!--

  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER

  Copyright 2008 Sun Microsystems, Inc. All rights reserved.

  Use is subject to license terms.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
  obtain a copy of the License at http://odftoolkit.org/docs/license.txt

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and
  limitations under the License.

-->
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="odfdom" default="default" basedir=".">
    <description>Builds, tests, and runs the project odfdom.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="odfdom-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    <property file="user.properties"/>
    
    <target name="-pre-init">
        <!-- set run condition depending on user setting 'gen-flat-odf-schema' -->
        <condition property="gen-flat-odf-schema.run">
            <matches pattern="true" string="${gen-flat-odf-schema}"/>
        </condition>
    </target>
    
    <target name="-pre-compile" depends="-gen-odf-dom-source"/>
        <!-- called before javac compilation -->

    <target name="-gen-odf-dom-source" depends="gen-odf-codegen" if="gen-flat-odf-schema.run">
        <antcall target="gen-odf-dom-source"/>
    </target>
    
    <target name="gen-odf-dom-source" depends="init, gen-odf-codegen"
            description="Generate ODF DOM source code.">
      <java jar="${dist.dir}/ODFDOMCodeGenerator.jar" failonerror="true">
          <arg value="schema/OpenDocument-strict-schema-v1.1.rng"/>
          <arg value="codegen/config.xml"/>
          <arg value="codegen/javacodetemplate.xml"/>
          <arg value="${src.dir}"/>
      </java>
    </target>

    <!-- *** compile codegen java classes before actuall build *** -->
    
    <target name="gen-odf-codegen" depends="init"
            description="Generate ODFDOMCodeGenerator.jar.">
        <mkdir dir="${build.dir}/codegen"/>
        <mkdir dir="${build.dir}/codegen/classes"/>
        <mkdir dir="${dist.dir}"/>
        <javac srcdir="codegen/src" destdir="${build.dir}/codegen/classes" debug="on"  source="1.5"/>
        <jar destfile="${dist.dir}/ODFDOMCodeGenerator.jar" basedir="${build.dir}/codegen/classes">
            <manifest>
                <attribute name="Class-Path" value="lib/xercesImpl.jar"/>
                <attribute name="Main-Class" value="org.openoffice.odf.codegen.CodeGen"/>
                <section name="ODFDOMCodeGenerator">
                    <attribute name="Application-Name" value="ODFDOMCodeGenerator"/>
                    <attribute name="Application-Version" value="0.0.1"/>
                    <attribute name="Application-Website" value="http://wiki.services.openoffice.org/wiki/ODFDOMCodeGenerator"/>
                    <attribute name="Built-By" value="${user.name}"/>
                    <attribute name="Built-Date" value="${TODAY}"/>
                    <attribute name="Main-Class" value="org.openoffice.odf.codegen.CodeGen"/>
                </section>
            </manifest>        
        </jar>         
    </target>

    <!-- *** Customized JavaDoc handling *** -->
    <target name="-javadoc-build" depends="init">
        <mkdir dir="${dist.javadoc.dir}"/>
        <mkdir dir="${dist.javadoc.dir}/resources"/>
        <copy todir="${dist.javadoc.dir}/resources">
            <fileset dir="${src.dir}/resources" excludes="**/*.od*,**/*.xsl" includes="**/*"/>            
        </copy>
        <javadoc Doctitle="ODFDOM" Overview="${src.dir}/resources/overview.html" additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" charset="UTF-8" destdir="${dist.javadoc.dir}" docencoding="UTF-8" encoding="${javadoc.encoding.used}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}">
            <link  href="http://java.sun.com/javase/6/docs/api/" />
            <link  href="http://xerces.apache.org/xerces-j/apiDocs/" />
            <!--
            <link  href="http://java.sun.com/j2se/1.5.0/docs/api/" />
            <link  href="http://java.sun.com/javase/6/docs/api/" />
            <link  offline="true" href="http://java.sun.com/javase/6/docs/api/" packagelistLoc="${solar.doc}/jdk16"/>-->
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
        </javadoc>
    </target>

    <!-- *** Customized Versioning *** -->
    <target name="-pre-jar">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
        <property name="manifest.available" value="true"/>
        <property name="manifest.available+main.class" value="true"/>
        <tstamp>
            <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
        </tstamp>
        <mkdir dir="${manifest.dir}"/>
        <manifest file="${manifest.file}">            
            <section name="ODFDOM">            
                <attribute name="Application-Name" value="${application.name}"/>
                <attribute name="Application-Version" value="${application.version}"/>
                <attribute name="Application-Website" value="${application.website}"/>
                <attribute name="Built-By" value="${user.name}"/>               
                <attribute name="Built-Date" value="${TODAY}"/>
                <attribute name="Main-Class" value="${main.class}"/>                
                <attribute name="Supported-Odf-Version" value="${supported.odf.version}"/>  
            </section>
        </manifest>
        <!-- add XML/SAX parser preferences -->
        <mkdir dir="${manifest.dir}/services"/>
        <copy todir="${manifest.dir}/services">
            <fileset dir="${src.dir}" includes="META-INF/services/*"/>
        </copy>                        
    </target>
    
</project>
