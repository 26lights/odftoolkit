
/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * Use is subject to license terms.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.openoffice.odf.doc.element.office;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import org.openoffice.odf.doc.OdfFileDom;
import org.openoffice.odf.doc.element.draw.OdfFillImage;
import org.openoffice.odf.doc.element.draw.OdfGradient;
import org.openoffice.odf.doc.element.draw.OdfHatch;
import org.openoffice.odf.doc.element.draw.OdfMarker;
import org.openoffice.odf.doc.element.style.OdfDefaultStyle;
import org.openoffice.odf.doc.element.style.OdfStyle;
import org.openoffice.odf.doc.element.text.OdfListStyle;
import org.openoffice.odf.doc.element.text.OdfOutlineStyle;
import org.openoffice.odf.dom.element.OdfElement;
import org.openoffice.odf.dom.element.office.OdfStylesElement;
import org.openoffice.odf.dom.style.OdfStyleFamily;
import org.w3c.dom.Node;

/**
 *
 */
public class OdfStyles extends OdfStylesElement
{
    HashMap< OdfStyleFamily, OdfDefaultStyle > mDefaultStyles;
    private HashMap< OdfStyleFamily, HashMap< String, OdfStyle > > mStyles;
    private HashMap< String, OdfListStyle > mListStyles;
    private HashMap< String, OdfMarker > mMarker;
    private HashMap< String, OdfGradient > mGradients;
    private HashMap< String, OdfHatch > mHatches;
    private HashMap< String, OdfFillImage > mFillImages;
    private OdfOutlineStyle mOutlineStyle;

    public OdfStyles( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc );
    }

    public OdfStyle createStyle(String name, OdfStyleFamily family)
    {
        OdfStyle newStyle = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfStyle.class);
        newStyle.setName(name);
        newStyle.setFamily(family);
        this.appendChild(newStyle);
        return newStyle;
    }
    
    public OdfDefaultStyle getOrCreateDefaultStyle( OdfStyleFamily family )
    {
        OdfDefaultStyle style = getDefaultStyle(family);
        if( style == null )
        {
            style = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDefaultStyle.class);        
            style.setFamily(family);
            this.appendChild(style);
        }
        return style;
    }
    
    public OdfListStyle createListStyle( String name )
    {
        OdfListStyle newStyle = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfListStyle.class);        
        newStyle.setName(name);
        this.appendChild(newStyle);
        return newStyle;
    }
    
    public OdfOutlineStyle getOrCreateOutlineStyle()
    {
        if( mOutlineStyle == null )
            this.appendChild(((OdfFileDom)this.ownerDocument).createOdfElement(OdfOutlineStyle.class));
        
        return mOutlineStyle;
    }

    /** returns the <outline-stye> element.
     * 
     * @return a pointer to the outline stye or null if there is no such element.
     */
    public OdfOutlineStyle getOutlineStyle()
    {
        return mOutlineStyle;
    }

    /** returns the <default-style> element.
     *
     * @param familyType is the family for the default style.
     * @return the default style with the given family or null if there is no such default style.
     */
    public OdfDefaultStyle getDefaultStyle( OdfStyleFamily familyType )
    {
        if( mDefaultStyles != null )
            return mDefaultStyles.get(familyType);
        else
            return null;
    }
    
    /** returns an iterator for all <default-style> elements.
     */
    public Iterable< OdfDefaultStyle > getDefaultStyles()
    {
        if( mDefaultStyles != null )
            return mDefaultStyles.values();
        else
            return new Vector< OdfDefaultStyle >();
    }

    /** returns the <style:style> element with the given name and family.
     * 
     * @param name is the name of the style.
     * @param familyType is the family of the style.
     * @return the style or null if there is no such style.
     */
    public OdfStyle getStyle( String name, OdfStyleFamily familyType )
    {
        if( mStyles != null )
        {
            HashMap< String, OdfStyle > familyMap = mStyles.get(familyType);
            if( familyMap != null )
                return familyMap.get( name );                
        }
        return null;
    }

    /** returns an iterator for all <style:style-style> elements for the given family.
     */    
    public Iterable< OdfStyle > getStylesForFamily( OdfStyleFamily familyType )
    {
        if( mStyles != null )
        {
            HashMap< String, OdfStyle > familyMap = mStyles.get(familyType);
            if( familyMap != null )
                return familyMap.values();
        }
        return new Vector< OdfStyle >();
    }

    /** returns the <style:list-style> element with the given name
     * 
     * @param name is the name of the list-style
     * @return the list style or null if there is no such list style
     */
    public OdfListStyle getListStyle( String name )
    {
        if( mListStyles != null )
            return mListStyles.get(name);
        else
            return null;
    }
    
    /** returns an iterator for all <style:list-style> elements.
     */        
    public Iterable< OdfListStyle > getListStyles()
    {
        if( mListStyles != null )
            return mListStyles.values();
        else
            return new Vector< OdfListStyle >();
    }

    public OdfMarker getMarker( String name )
    {
        if( mMarker != null )
            return mMarker.get(name);
        else
            return null;
    }

    /** returns an iterator for all <draw:marker> elements.
     */            
    public Iterable< OdfMarker > getMarker()
    {
        if( mMarker != null )
            return mMarker.values();
        else
            return new Vector< OdfMarker >();
    }    
    
    public OdfGradient getGradient( String name )
    {
        if( mGradients != null )
            return mGradients.get(name);
        else
            return null;
    }
    
    /** returns an iterator for all <draw:gradient> elements.
     */            
    public Iterable< OdfGradient > getGradients()
    {
        if( mGradients != null )
            return mGradients.values();
        else
            return new Vector< OdfGradient >();
    }
    
    public OdfHatch getHatch( String name )
    {
        if( mHatches != null )
        {
            return mHatches.get(name);
        }
        else
        {
            return null;
        }
    }

    /** returns an iterator for all <draw:hatch> elements.
     */                
    public Iterable< OdfHatch > getHatches()
    {
        if( mHatches != null )
            return mHatches.values();
        else
            return new Vector< OdfHatch >();
    }
    
    public OdfFillImage getFillImage( String name )
    {
        if( mFillImages != null )
        {
            return mFillImages.get(name);            
        }
        else
        {
            return null;
        }
    }

    /** returns an iterator for all <draw:fill-image> elements.
     */                
    public Iterable< OdfFillImage > getFillImages()
    {
        if( mFillImages != null )
            return mFillImages.values();
        else
            return new Vector< OdfFillImage >();
    }

    protected void onOdfNodeInserted( OdfElement node, Node refNode )
    {
        if( node instanceof OdfDefaultStyle )
        {
            OdfDefaultStyle defaultStyle = (OdfDefaultStyle)node;
            if( mDefaultStyles == null )
                mDefaultStyles = new HashMap< OdfStyleFamily, OdfDefaultStyle >();
            
            mDefaultStyles.put( defaultStyle.getFamily(), defaultStyle);            
        }
        else if( node instanceof OdfStyle )
        {
            OdfStyle style = (OdfStyle)node;
            if( mStyles == null )
                mStyles = new HashMap< OdfStyleFamily, HashMap< String, OdfStyle > >();
            
            HashMap< String, OdfStyle > familyMap = mStyles.get(style.getFamily());
            if( familyMap == null )
            {
                familyMap = new HashMap< String, OdfStyle >();
                mStyles.put( style.getFamily(), familyMap );
            }
            
            familyMap.put( style.getName(), style);
        }
        else if( node instanceof OdfListStyle )
        {
            OdfListStyle listStyle = (OdfListStyle)node;
            if( mListStyles == null )
                mListStyles = new HashMap< String, OdfListStyle >();
            
            mListStyles.put(listStyle.getName(), listStyle);
        }
        else if( node instanceof OdfMarker )
        {
            OdfMarker marker = (OdfMarker)node;
            if( mMarker == null )
                mMarker = new HashMap< String, OdfMarker >();
            
            mMarker.put( marker.getName(), marker);            
        }
        else if( node instanceof OdfGradient )
        {
            OdfGradient gradient = (OdfGradient)node;
            if( mGradients == null )
                mGradients = new HashMap< String, OdfGradient >();
            
            mGradients.put( gradient.getName(), gradient);
        }
        else if( node instanceof OdfHatch )
        {
            OdfHatch hatch = (OdfHatch)node;
            if( mHatches == null )
                mHatches = new HashMap< String, OdfHatch >();
            
            mHatches.put(hatch.getName(), hatch);
        }
        else if( node instanceof OdfFillImage )
        {
            OdfFillImage fillImage = (OdfFillImage)node;
            
            if( mFillImages == null )
                mFillImages = new HashMap< String, OdfFillImage >();
            
            mFillImages.put(fillImage.getName(), fillImage);
        }
        else if( node instanceof OdfOutlineStyle )
        {
            mOutlineStyle = (OdfOutlineStyle)node;
        }
    }
    
    protected void onOdfNodeRemoved( OdfElement node )
    {
        if( node instanceof OdfDefaultStyle )
        {
            if( mDefaultStyles != null )
            {
                OdfDefaultStyle defaultStyle = (OdfDefaultStyle)node;
                mDefaultStyles.remove(defaultStyle.getFamily());
            }
        }
        else if( node instanceof OdfStyle )
        {
            if( mStyles != null )
            {
                OdfStyle style = (OdfStyle)node;
                HashMap< String, OdfStyle > familyMap = mStyles.get(style.getFamily());
                if( familyMap != null )
                {
                    familyMap.remove(style.getName());
                    if( familyMap.isEmpty() )
                        mStyles.remove(style.getFamily());
                }
            }
        }
        else if( node instanceof OdfListStyle )
        {
            if( mListStyles != null )
            {
                OdfListStyle listStyle = (OdfListStyle)node;
                mListStyles.remove(listStyle.getName());
            }
        }
        else if( node instanceof OdfMarker )
        {
            if( mMarker != null )
            {
                OdfMarker marker = (OdfMarker)node;
                mMarker.remove(marker.getName());
            }
        }
        else if( node instanceof OdfGradient )
        {
            if( mGradients != null )
            {
                OdfGradient gradient = (OdfGradient)node;
                mGradients.remove(gradient.getName());
            }
        }
        else if( node instanceof OdfHatch )
        {
            if( mHatches != null )
            {
                OdfHatch hatch = (OdfHatch)node;
                mHatches.remove(hatch.getName());
            }
        }
        else if( node instanceof OdfFillImage )
        {
            if( mFillImages != null )
            {
                OdfFillImage fillImage = (OdfFillImage)node;
                mFillImages.remove(fillImage.getName() );
            }
        }
        else if( node instanceof OdfOutlineStyle )
        {
            if( mOutlineStyle == (OdfOutlineStyle)node )
                mOutlineStyle = null;
        }
    }    
}
