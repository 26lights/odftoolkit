/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.pkg.manifest;

import java.util.HashMap;
import java.util.Set;

import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.element.manifest.OdfManifestElement;
import org.odftoolkit.odfdom.dom.util.DomNodeList;
import org.w3c.dom.Node;

public class Manifest extends OdfManifestElement{

	/**
	 * 
	 */
	private static final long serialVersionUID = 2068492091396630195L;
	
	public Manifest(OdfFileDom ownerDoc) {
		super(ownerDoc);
	}
	
	/**
     * 
     * Get a FileEntry from the manifest file (i.e. /META/manifest.xml") with special name
     * 
     * @param _fileEntryPath The relative package path within the ODF package
     * @return The manifest file entry will be returned.
     */
    public FileEntry getFileEntry(String _fileEntryPath) {
    	
    	FileEntry entry = OdfElement.findFirstChildNode(FileEntry.class, this);
        while (entry != null) {
        	FileEntry nextEntry = OdfElement.findNextChildNode(FileEntry.class, entry);
        	if(entry.getFullPath().equals(_fileEntryPath))
        	{
        		return entry;
        	}
            entry = nextEntry;
        }
        return null;
    }

    /**
     * Get FileEntries from the manifest file (i.e. /META/manifest.xml")
     * @return The manifest file entries will be returned.
     */
    public Set<String> getFileEntries() {
    	HashMap<String, FileEntry> mManifestEntries = new HashMap<String, FileEntry>();;
        for (Node n : new DomNodeList(this.getChildNodes())) {
            if (n instanceof FileEntry) {
                FileEntry _entry = (FileEntry) n;
                mManifestEntries.put(_entry.getFullPath(),_entry);
            }
        }
        return mManifestEntries.keySet();
    }
    
    /**
     * Add a FileEntry in the manifest file (i.e. /META/manifest.xml")
     * @param _fullPath	FileEntry's full path in the ODF package
     * @param _mediaType	FileEntry's media type
     * @return the new added FileEntry
     */
    public FileEntry addFileEntry(String _fullPath, String _mediaType)
    {
    	return (FileEntry)createFileEntryElement(_fullPath,_mediaType);
    }
    
    /**
     * remove a FileEntry in the manifest file (i.e. /META/manifest.xml")
     * @param _fullPath	FileEntry's full path in the ODF package
     * @return void
     */
    public void removeFileEntry(String _fileEntryPath)
    {
        FileEntry entry = OdfElement.findFirstChildNode(FileEntry.class, this);
        while (entry != null) {
        	FileEntry nextEntry = OdfElement.findNextChildNode(FileEntry.class, entry);
        	if(entry.getFullPath().equals(_fileEntryPath))
        	{
        		this.removeChild(entry);
        		break;
        	}
            entry = nextEntry;
        }
    }
}
