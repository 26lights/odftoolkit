/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    
package org.odftoolkit.odfdom.dom.type.presentation;

public enum OdfTransitionStyleType
{
              VERTICAL_STRIPES( "vertical-stripes" ), INTERLOCKING_VERTICAL_BOTTOM( "interlocking-vertical-bottom" ), FADE_TO_CENTER( "fade-to-center" ), OPEN_HORIZONTAL( "open-horizontal" ), UNCOVER_TO_LEFT( "uncover-to-left" ), FADE_FROM_UPPERLEFT( "fade-from-upperleft" ), ROLL_FROM_BOTTOM( "roll-from-bottom" ), COUNTERCLOCKWISE( "counterclockwise" ), MOVE_FROM_TOP( "move-from-top" ), FADE_FROM_CENTER( "fade-from-center" ), UNCOVER_TO_UPPERRIGHT( "uncover-to-upperright" ), MELT( "melt" ), MOVE_FROM_LOWERRIGHT( "move-from-lowerright" ), VERTICAL_LINES( "vertical-lines" ), SPIRALOUT_RIGHT( "spiralout-right" ), INTERLOCKING_VERTICAL_TOP( "interlocking-vertical-top" ), STRETCH_FROM_LEFT( "stretch-from-left" ), INTERLOCKING_HORIZONTAL_RIGHT( "interlocking-horizontal-right" ), WAVYLINE_FROM_RIGHT( "wavyline-from-right" ), OPEN_VERTICAL( "open-vertical" ), UNCOVER_TO_LOWERRIGHT( "uncover-to-lowerright" ), ROLL_FROM_RIGHT( "roll-from-right" ), FADE_FROM_LOWERLEFT( "fade-from-lowerleft" ), HORIZONTAL_STRIPES( "horizontal-stripes" ), SPIRALIN_LEFT( "spiralin-left" ), UNCOVER_TO_TOP( "uncover-to-top" ), FADE_FROM_BOTTOM( "fade-from-bottom" ), HORIZONTAL_LINES( "horizontal-lines" ), FADE_FROM_LOWERRIGHT( "fade-from-lowerright" ), DISSOLVE( "dissolve" ), STRETCH_FROM_TOP( "stretch-from-top" ), STRETCH_FROM_BOTTOM( "stretch-from-bottom" ), CLOSE_VERTICAL( "close-vertical" ), WAVYLINE_FROM_TOP( "wavyline-from-top" ), WAVYLINE_FROM_BOTTOM( "wavyline-from-bottom" ), HORIZONTAL_CHECKERBOARD( "horizontal-checkerboard" ), FADE_FROM_UPPERRIGHT( "fade-from-upperright" ), SPIRALOUT_LEFT( "spiralout-left" ), MOVE_FROM_UPPERLEFT( "move-from-upperleft" ), RANDOM( "random" ), INTERLOCKING_HORIZONTAL_LEFT( "interlocking-horizontal-left" ), FLY_AWAY( "fly-away" ), VERTICAL_CHECKERBOARD( "vertical-checkerboard" ), UNCOVER_TO_LOWERLEFT( "uncover-to-lowerleft" ), FADE_FROM_TOP( "fade-from-top" ), UNCOVER_TO_BOTTOM( "uncover-to-bottom" ), UNCOVER_TO_UPPERLEFT( "uncover-to-upperleft" ), NONE( "none" ), ROLL_FROM_TOP( "roll-from-top" ), FADE_FROM_RIGHT( "fade-from-right" ), ROLL_FROM_LEFT( "roll-from-left" ), CLOSE_HORIZONTAL( "close-horizontal" ), MOVE_FROM_RIGHT( "move-from-right" ), OPEN( "open" ), MOVE_FROM_LEFT( "move-from-left" ), CLOSE( "close" ), UNCOVER_TO_RIGHT( "uncover-to-right" ), MOVE_FROM_BOTTOM( "move-from-bottom" ), FADE_FROM_LEFT( "fade-from-left" ), STRETCH_FROM_RIGHT( "stretch-from-right" ), MOVE_FROM_UPPERRIGHT( "move-from-upperright" ), WAVYLINE_FROM_LEFT( "wavyline-from-left" ), CLOCKWISE( "clockwise" ), SPIRALIN_RIGHT( "spiralin-right" ), MOVE_FROM_LOWERLEFT( "move-from-lowerleft" );

    private String m_aValue;

    OdfTransitionStyleType( String _aValue )
    {
        m_aValue = _aValue;
    }

    public String toString()
    {
        return m_aValue;
    }

    public static String toString( OdfTransitionStyleType _aEnum )
    {
        return _aEnum.toString();
    }

    public static OdfTransitionStyleType enumValueOf( String _aString )
    {
        for( OdfTransitionStyleType aIter : values() )
        {
            if( _aString.equals( aIter.toString() ) )
            {
                return aIter;
            }
        }
        return null;
    }

}
