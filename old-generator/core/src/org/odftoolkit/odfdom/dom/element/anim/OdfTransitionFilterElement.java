/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.anim;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.type.OdfId;
import org.odftoolkit.odfdom.dom.type.smil.OdfAccumulateType;
import org.odftoolkit.odfdom.dom.type.smil.OdfAdditiveType;
import org.odftoolkit.odfdom.dom.type.smil.OdfDirectionType;
import org.odftoolkit.odfdom.dom.type.smil.OdfFadeColorType;
import org.odftoolkit.odfdom.dom.type.smil.OdfModeType;
import org.odftoolkit.odfdom.dom.type.OdfNonNegativeInteger;
import org.odftoolkit.odfdom.dom.type.smil.OdfRestartType;
import org.odftoolkit.odfdom.dom.type.smil.OdfRestartDefaultType;
import org.odftoolkit.odfdom.dom.type.smil.OdfFillType;
import org.odftoolkit.odfdom.dom.type.smil.OdfFillDefaultType;
import org.odftoolkit.odfdom.dom.type.OdfBoolean;

;

/**
 * ODF DOM Element implementation for element "<anim:transitionFilter>".
 */
public abstract class OdfTransitionFilterElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.ANIM, "transitionFilter" );

    public OdfTransitionFilterElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Initialize mandatory attributes.
     */
    public void init(String _aType)
    {
        setType( _aType );
    }

    /**
     * Get value of attribute "smil:targetElement".
     */
    public String getTargetElement()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "targetElement" ) );
        return OdfId.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:targetElement".
     */
    public void setTargetElement( String _aTargetElement )
    {                    
        String aStringVal = OdfId.toString( _aTargetElement );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "targetElement" ), aStringVal );
    }

    /**
     * Get value of attribute "anim:sub-item".
     */
    public String getSubItem()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.ANIM, "sub-item" ) );
    }

    /**
     * Set value of attribute "anim:sub-item".
     */
    public void setSubItem( String _aSubItem )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.ANIM, "sub-item" ), _aSubItem );
    }

    /**
     * Get value of attribute "smil:accumulate".
     */
    public OdfAccumulateType getAccumulate()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "accumulate" ) );
        return OdfAccumulateType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:accumulate".
     */
    public void setAccumulate( OdfAccumulateType _aAccumulate )
    {                    
        String aStringVal = OdfAccumulateType.toString( _aAccumulate );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "accumulate" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:additive".
     */
    public OdfAdditiveType getAdditive()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "additive" ) );
        return OdfAdditiveType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:additive".
     */
    public void setAdditive( OdfAdditiveType _aAdditive )
    {                    
        String aStringVal = OdfAdditiveType.toString( _aAdditive );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "additive" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:values".
     */
    public String getValues()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "values" ) );
    }

    /**
     * Set value of attribute "smil:values".
     */
    public void setValues( String _aValues )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "values" ), _aValues );
    }

    /**
     * Get value of attribute "anim:formula".
     */
    public String getFormula()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.ANIM, "formula" ) );
    }

    /**
     * Set value of attribute "anim:formula".
     */
    public void setFormula( String _aFormula )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.ANIM, "formula" ), _aFormula );
    }

    /**
     * Get value of attribute "smil:to".
     */
    public String getTo()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "to" ) );
    }

    /**
     * Set value of attribute "smil:to".
     */
    public void setTo( String _aTo )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "to" ), _aTo );
    }

    /**
     * Get value of attribute "smil:from".
     */
    public String getFrom()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "from" ) );
    }

    /**
     * Set value of attribute "smil:from".
     */
    public void setFrom( String _aFrom )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "from" ), _aFrom );
    }

    /**
     * Get value of attribute "smil:by".
     */
    public String getBy()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "by" ) );
    }

    /**
     * Set value of attribute "smil:by".
     */
    public void setBy( String _aBy )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "by" ), _aBy );
    }

    /**
     * Get value of attribute "smil:type".
     */
    public String getType()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "type" ) );
    }

    /**
     * Set value of attribute "smil:type".
     */
    public void setType( String _aType )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "type" ), _aType );
    }

    /**
     * Get value of attribute "smil:subtype".
     */
    public String getSubtype()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "subtype" ) );
    }

    /**
     * Set value of attribute "smil:subtype".
     */
    public void setSubtype( String _aSubtype )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "subtype" ), _aSubtype );
    }

    /**
     * Get value of attribute "smil:direction".
     */
    public OdfDirectionType getDirection()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "direction" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "forward";
        }

        return OdfDirectionType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:direction".
     */
    public void setDirection( OdfDirectionType _aDirection )
    {                    
        String aStringVal = OdfDirectionType.toString( _aDirection );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "direction" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:fadeColor".
     */
    public OdfFadeColorType getFadeColor()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "fadeColor" ) );
        return OdfFadeColorType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:fadeColor".
     */
    public void setFadeColor( OdfFadeColorType _aFadeColor )
    {                    
        String aStringVal = OdfFadeColorType.toString( _aFadeColor );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "fadeColor" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:mode".
     */
    public OdfModeType getMode()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "mode" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "in";
        }

        return OdfModeType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:mode".
     */
    public void setMode( OdfModeType _aMode )
    {                    
        String aStringVal = OdfModeType.toString( _aMode );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "mode" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:begin".
     */
    public String getBegin()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "begin" ) );
    }

    /**
     * Set value of attribute "smil:begin".
     */
    public void setBegin( String _aBegin )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "begin" ), _aBegin );
    }

    /**
     * Get value of attribute "smil:end".
     */
    public String getEnd()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "end" ) );
    }

    /**
     * Set value of attribute "smil:end".
     */
    public void setEnd( String _aEnd )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "end" ), _aEnd );
    }

    /**
     * Get value of attribute "smil:dur".
     */
    public String getDur()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "dur" ) );
    }

    /**
     * Set value of attribute "smil:dur".
     */
    public void setDur( String _aDur )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "dur" ), _aDur );
    }

    /**
     * Get value of attribute "smil:repeatDur".
     */
    public String getRepeatDur()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "repeatDur" ) );
    }

    /**
     * Set value of attribute "smil:repeatDur".
     */
    public void setRepeatDur( String _aRepeatDur )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "repeatDur" ), _aRepeatDur );
    }

    /**
     * Get value of attribute "smil:repeatCount".
     */
    public Integer getRepeatCount()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "repeatCount" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:repeatCount".
     */
    public void setRepeatCount( Integer _aRepeatCount )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aRepeatCount );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "repeatCount" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:restart".
     */
    public OdfRestartType getRestart()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "restart" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "default";
        }

        return OdfRestartType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:restart".
     */
    public void setRestart( OdfRestartType _aRestart )
    {                    
        String aStringVal = OdfRestartType.toString( _aRestart );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "restart" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:restartDefault".
     */
    public OdfRestartDefaultType getRestartDefault()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "restartDefault" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "inherit";
        }

        return OdfRestartDefaultType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:restartDefault".
     */
    public void setRestartDefault( OdfRestartDefaultType _aRestartDefault )
    {                    
        String aStringVal = OdfRestartDefaultType.toString( _aRestartDefault );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "restartDefault" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:fill".
     */
    public OdfFillType getFill()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "fill" ) );
        return OdfFillType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:fill".
     */
    public void setFill( OdfFillType _aFill )
    {                    
        String aStringVal = OdfFillType.toString( _aFill );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "fill" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:fillDefault".
     */
    public OdfFillDefaultType getFillDefault()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "fillDefault" ) );
        return OdfFillDefaultType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:fillDefault".
     */
    public void setFillDefault( OdfFillDefaultType _aFillDefault )
    {                    
        String aStringVal = OdfFillDefaultType.toString( _aFillDefault );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "fillDefault" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:accelerate".
     */
    public Double getAccelerate()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "accelerate" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0.0";
        }

        return Double.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:accelerate".
     */
    public void setAccelerate( Double _aAccelerate )
    {                    
        String aStringVal = Double.toString( _aAccelerate );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "accelerate" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:decelerate".
     */
    public Double getDecelerate()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "decelerate" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0.0";
        }

        return Double.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:decelerate".
     */
    public void setDecelerate( Double _aDecelerate )
    {                    
        String aStringVal = Double.toString( _aDecelerate );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "decelerate" ), aStringVal );
    }

    /**
     * Get value of attribute "smil:autoReverse".
     */
    public Boolean getAutoReverse()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SMIL, "autoReverse" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "smil:autoReverse".
     */
    public void setAutoReverse( Boolean _aAutoReverse )
    {                    
        String aStringVal = OdfBoolean.toString( _aAutoReverse );
        setOdfAttribute( OdfName.get( OdfNamespace.SMIL, "autoReverse" ), aStringVal );
    }

}
