/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.draw;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.type.OdfAnyURI;
import org.odftoolkit.odfdom.dom.type.office.OdfTargetFrameNameType;
import org.odftoolkit.odfdom.dom.type.xlink.OdfShowType;
import org.odftoolkit.odfdom.dom.type.OdfBoolean;
import org.odftoolkit.odfdom.dom.type.OdfId;

import org.odftoolkit.odfdom.dom.element.dr3d.OdfSceneElement;

/**
 * ODF DOM Element implementation for element "<draw:a>".
 */
public abstract class OdfHyperlinkElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.DRAW, "a" );

    public OdfHyperlinkElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Initialize mandatory attributes.
     */
    public void init(String _aHref)
    {
        setHref( _aHref );
    }

    /**
     * Get value of attribute "xlink:href".
     */
    public String getHref()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.XLINK, "href" ) );
        return OdfAnyURI.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "xlink:href".
     */
    public void setHref( String _aHref )
    {                    
        String aStringVal = OdfAnyURI.toString( _aHref );
        setOdfAttribute( OdfName.get( OdfNamespace.XLINK, "href" ), aStringVal );
        setOdfAttribute( OdfName.get( OdfNamespace.XLINK, "type" ), "simple" );
        setOdfAttribute( OdfName.get( OdfNamespace.XLINK, "actuate" ), "onRequest" );
    }

    /**
     * Get value of attribute "office:target-frame-name".
     */
    public OdfTargetFrameNameType getTargetFrameName()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "target-frame-name" ) );
        return OdfTargetFrameNameType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "office:target-frame-name".
     */
    public void setTargetFrameName( OdfTargetFrameNameType _aTargetFrameName )
    {                    
        String aStringVal = OdfTargetFrameNameType.toString( _aTargetFrameName );
        setOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "target-frame-name" ), aStringVal );
    }

    /**
     * Get value of attribute "xlink:show".
     */
    public OdfShowType getShow()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.XLINK, "show" ) );
        return OdfShowType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "xlink:show".
     */
    public void setShow( OdfShowType _aShow )
    {                    
        String aStringVal = OdfShowType.toString( _aShow );
        setOdfAttribute( OdfName.get( OdfNamespace.XLINK, "show" ), aStringVal );
    }

    /**
     * Get value of attribute "office:name".
     */
    public String getName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "name" ) );
    }

    /**
     * Set value of attribute "office:name".
     */
    public void setName( String _aName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "name" ), _aName );
    }

    /**
     * Get value of attribute "office:title".
     */
    public String getTitle()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "title" ) );
    }

    /**
     * Set value of attribute "office:title".
     */
    public void setTitle( String _aTitle )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "title" ), _aTitle );
    }

    /**
     * Get value of attribute "office:server-map".
     */
    public Boolean getServerMap()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "server-map" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "office:server-map".
     */
    public void setServerMap( Boolean _aServerMap )
    {                    
        String aStringVal = OdfBoolean.toString( _aServerMap );
        setOdfAttribute( OdfName.get( OdfNamespace.OFFICE, "server-map" ), aStringVal );
    }

    /**
     * Get value of attribute "xml:id".
     */
    public String getXmlid()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.XML, "id" ) );
        return OdfId.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "xml:id".
     */
    public void setXmlid( String _aXmlid )
    {                    
        String aStringVal = OdfId.toString( _aXmlid );
        setOdfAttribute( OdfName.get( OdfNamespace.XML, "id" ), aStringVal );
    }

    /**
    * Create child element "draw:rect".
    */
    public OdfRectElement createRectElement()
    {
        OdfRectElement  _nRect = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfRectElement.class);
        this.appendChild( _nRect);
        return  _nRect;
    }                   
               
    /**
    * Create child element "draw:line".
    */
    public OdfLineElement createLineElement(String   _aX1, String   _aY1, String   _aX2, String   _aY2)
    {
        OdfLineElement  _nLine = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfLineElement.class);
        _nLine.setX1( _aX1);
        _nLine.setY1( _aY1);
        _nLine.setX2( _aX2);
        _nLine.setY2( _aY2);
        this.appendChild( _nLine);
        return  _nLine;      
    }
    
    /**
    * Create child element "draw:polyline".
    */
    public OdfPolylineElement createPolylineElement(String   _aPoints, Integer   _aViewBox)
    {
        OdfPolylineElement  _nPolyline = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPolylineElement.class);
        _nPolyline.setPoints( _aPoints);
        _nPolyline.setViewBox( _aViewBox);
        this.appendChild( _nPolyline);
        return  _nPolyline;      
    }
    
    /**
    * Create child element "draw:polygon".
    */
    public OdfPolygonElement createPolygonElement(String   _aPoints, Integer   _aViewBox)
    {
        OdfPolygonElement  _nPolygon = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPolygonElement.class);
        _nPolygon.setPoints( _aPoints);
        _nPolygon.setViewBox( _aViewBox);
        this.appendChild( _nPolygon);
        return  _nPolygon;      
    }
    
    /**
    * Create child element "draw:regular-polygon".
    */
    public OdfRegularPolygonElement createRegularPolygonElement(Integer   _aCorners, Boolean   _aConcave)
    {
        OdfRegularPolygonElement  _nRegularPolygon = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfRegularPolygonElement.class);
        _nRegularPolygon.setCorners( _aCorners);
        _nRegularPolygon.setConcave( _aConcave);
        this.appendChild( _nRegularPolygon);
        return  _nRegularPolygon;      
    }
    
    /**
    * Create child element "draw:regular-polygon".
    */
    public OdfRegularPolygonElement createRegularPolygonElement(Boolean   _aConcave, Integer   _aCorners)
    {
        OdfRegularPolygonElement  _nRegularPolygon = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfRegularPolygonElement.class);
        _nRegularPolygon.setConcave( _aConcave);
        _nRegularPolygon.setCorners( _aCorners);
        this.appendChild( _nRegularPolygon);
        return  _nRegularPolygon;      
    }
    
    /**
    * Create child element "draw:path".
    */
    public OdfPathElement createPathElement(String   _aD, Integer   _aViewBox)
    {
        OdfPathElement  _nPath = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPathElement.class);
        _nPath.setD( _aD);
        _nPath.setViewBox( _aViewBox);
        this.appendChild( _nPath);
        return  _nPath;      
    }
    
    /**
    * Create child element "draw:circle".
    */
    public OdfCircleElement createCircleElement()
    {
        OdfCircleElement  _nCircle = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfCircleElement.class);
        this.appendChild( _nCircle);
        return  _nCircle;
    }                   
               
    /**
    * Create child element "draw:ellipse".
    */
    public OdfEllipseElement createEllipseElement()
    {
        OdfEllipseElement  _nEllipse = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfEllipseElement.class);
        this.appendChild( _nEllipse);
        return  _nEllipse;
    }                   
               
    /**
    * Create child element "draw:g".
    */
    public OdfGroupElement createGroupElement()
    {
        OdfGroupElement  _nGroup = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfGroupElement.class);
        this.appendChild( _nGroup);
        return  _nGroup;
    }                   
               
    /**
    * Create child element "draw:page-thumbnail".
    */
    public OdfPageThumbnailElement createPageThumbnailElement()
    {
        OdfPageThumbnailElement  _nPageThumbnail = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPageThumbnailElement.class);
        this.appendChild( _nPageThumbnail);
        return  _nPageThumbnail;
    }                   
               
    /**
    * Create child element "draw:frame".
    */
    public OdfFrameElement createFrameElement()
    {
        OdfFrameElement  _nFrame = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfFrameElement.class);
        this.appendChild( _nFrame);
        return  _nFrame;
    }                   
               
    /**
    * Create child element "draw:measure".
    */
    public org.odftoolkit.odfdom.dom.element.draw.OdfMeasureElement createdrawMeasureElement(String   _aX1, String   _aY1, String   _aX2, String   _aY2)
    {
        org.odftoolkit.odfdom.dom.element.draw.OdfMeasureElement  _nMeasure = ((OdfFileDom)this.ownerDocument).createOdfElement(org.odftoolkit.odfdom.dom.element.draw.OdfMeasureElement.class);
        _nMeasure.setX1( _aX1);
        _nMeasure.setY1( _aY1);
        _nMeasure.setX2( _aX2);
        _nMeasure.setY2( _aY2);
        this.appendChild( _nMeasure);
        return  _nMeasure;      
    }
    
    /**
    * Create child element "draw:caption".
    */
    public OdfCaptionElement createCaptionElement()
    {
        OdfCaptionElement  _nCaption = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfCaptionElement.class);
        this.appendChild( _nCaption);
        return  _nCaption;
    }                   
               
    /**
    * Create child element "draw:connector".
    */
    public OdfConnectorElement createConnectorElement(Integer   _aViewBox)
    {
        OdfConnectorElement  _nConnector = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfConnectorElement.class);
        _nConnector.setViewBox( _aViewBox);
        this.appendChild( _nConnector);
        return  _nConnector;      
    }
    
    /**
    * Create child element "draw:control".
    */
    public OdfControlElement createControlElement(String   _aControl)
    {
        OdfControlElement  _nControl = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfControlElement.class);
        _nControl.setControl( _aControl);
        this.appendChild( _nControl);
        return  _nControl;      
    }
    
    /**
    * Create child element "dr3d:scene".
    */
    public OdfSceneElement createSceneElement()
    {
        OdfSceneElement  _nScene = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfSceneElement.class);
        this.appendChild( _nScene);
        return  _nScene;
    }                   
               
    /**
    * Create child element "draw:custom-shape".
    */
    public OdfCustomShapeElement createCustomShapeElement()
    {
        OdfCustomShapeElement  _nCustomShape = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfCustomShapeElement.class);
        this.appendChild( _nCustomShape);
        return  _nCustomShape;
    }                   
               
}
