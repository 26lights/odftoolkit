/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.draw;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.type.OdfBoolean;
import org.odftoolkit.odfdom.dom.type.OdfPercent;
import org.odftoolkit.odfdom.dom.type.dr3d.OdfShadeModeType;
import org.odftoolkit.odfdom.dom.type.dr3d.OdfProjectionType;
import org.odftoolkit.odfdom.dom.type.draw.OdfGluePointType;
import org.odftoolkit.odfdom.dom.type.draw.OdfTextPathModeType;
import org.odftoolkit.odfdom.dom.type.draw.OdfTextPathScaleType;


/**
 * ODF DOM Element implementation for element "<draw:enhanced-geometry>".
 */
public abstract class OdfEnhancedGeometryElement extends OdfElement
{        
    /**
	 * 
	 */
	private static final long serialVersionUID = 911975622961121660L;
	public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.DRAW, "enhanced-geometry" );

    public OdfEnhancedGeometryElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    @Override
	public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }


    /**
     * Get value of attribute "draw:type".
     */
    public String getType()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "type" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "non-primitive";
        }

        return String.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:type".
     */
    public void setType( String _aType )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "type" ), _aType );
    }

    /**
     * Get value of attribute "svg:viewBox".
     */
    public Integer getViewbox()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "viewBox" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:viewBox".
     */
    public void setViewbox( Integer _aViewbox )
    {                    
        String aStringVal = Integer.toString( _aViewbox );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "viewBox" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:mirror-vertical".
     */
    public Boolean getMirrorVertical()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "mirror-vertical" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:mirror-vertical".
     */
    public void setMirrorVertical( Boolean _aMirrorVertical )
    {                    
        String aStringVal = OdfBoolean.toString( _aMirrorVertical );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "mirror-vertical" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:mirror-horizontal".
     */
    public Boolean getMirrorHorizontal()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "mirror-horizontal" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:mirror-horizontal".
     */
    public void setMirrorHorizontal( Boolean _aMirrorHorizontal )
    {                    
        String aStringVal = OdfBoolean.toString( _aMirrorHorizontal );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "mirror-horizontal" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:text-rotate-angle".
     */
    public String getTextRotateAngle()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-rotate-angle" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0";
        }

        return String.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:text-rotate-angle".
     */
    public void setTextRotateAngle( String _aTextRotateAngle )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-rotate-angle" ), _aTextRotateAngle );
    }

    /**
     * Get value of attribute "draw:extrusion-allowed".
     */
    public Boolean getExtrusionAllowed()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-allowed" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-allowed".
     */
    public void setExtrusionAllowed( Boolean _aExtrusionAllowed )
    {                    
        String aStringVal = OdfBoolean.toString( _aExtrusionAllowed );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-allowed" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:text-path-allowed".
     */
    public Boolean getTextPathAllowed()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-allowed" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:text-path-allowed".
     */
    public void setTextPathAllowed( Boolean _aTextPathAllowed )
    {                    
        String aStringVal = OdfBoolean.toString( _aTextPathAllowed );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-allowed" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:concentric-gradient-fill-allowed".
     */
    public Boolean getConcentricGradientFillAllowed()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "concentric-gradient-fill-allowed" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:concentric-gradient-fill-allowed".
     */
    public void setConcentricGradientFillAllowed( Boolean _aConcentricGradientFillAllowed )
    {                    
        String aStringVal = OdfBoolean.toString( _aConcentricGradientFillAllowed );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "concentric-gradient-fill-allowed" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion".
     */
    public Boolean getExtrusion()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion".
     */
    public void setExtrusion( Boolean _aExtrusion )
    {                    
        String aStringVal = OdfBoolean.toString( _aExtrusion );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-brightness".
     */
    public Double getExtrusionBrightness()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-brightness" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "33%";
        }

        return OdfPercent.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-brightness".
     */
    public void setExtrusionBrightness( Double _aExtrusionBrightness )
    {                    
        String aStringVal = OdfPercent.toString( _aExtrusionBrightness );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-brightness" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-depth".
     */
    public String getExtrusionDepth()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-depth" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "36pt 0";
        }

        return String.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-depth".
     */
    public void setExtrusionDepth( String _aExtrusionDepth )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-depth" ), _aExtrusionDepth );
    }

    /**
     * Get value of attribute "draw:extrusion-diffusion".
     */
    public Double getExtrusionDiffusion()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-diffusion" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0%";
        }

        return OdfPercent.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-diffusion".
     */
    public void setExtrusionDiffusion( Double _aExtrusionDiffusion )
    {                    
        String aStringVal = OdfPercent.toString( _aExtrusionDiffusion );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-diffusion" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-number-of-line-segments".
     */
    public Integer getExtrusionNumberOfLineSegments()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-number-of-line-segments" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "30";
        }

        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-number-of-line-segments".
     */
    public void setExtrusionNumberOfLineSegments( Integer _aExtrusionNumberOfLineSegments )
    {                    
        String aStringVal = Integer.toString( _aExtrusionNumberOfLineSegments );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-number-of-line-segments" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-light-face".
     */
    public Boolean getExtrusionLightFace()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-light-face" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-light-face".
     */
    public void setExtrusionLightFace( Boolean _aExtrusionLightFace )
    {                    
        String aStringVal = OdfBoolean.toString( _aExtrusionLightFace );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-light-face" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-first-light-harsh".
     */
    public Boolean getExtrusionFirstLightHarsh()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-first-light-harsh" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-first-light-harsh".
     */
    public void setExtrusionFirstLightHarsh( Boolean _aExtrusionFirstLightHarsh )
    {                    
        String aStringVal = OdfBoolean.toString( _aExtrusionFirstLightHarsh );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-first-light-harsh" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-second-light-harsh".
     */
    public Boolean getExtrusionSecondLightHarsh()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-second-light-harsh" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-second-light-harsh".
     */
    public void setExtrusionSecondLightHarsh( Boolean _aExtrusionSecondLightHarsh )
    {                    
        String aStringVal = OdfBoolean.toString( _aExtrusionSecondLightHarsh );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-second-light-harsh" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-first-light-level".
     */
    public Double getExtrusionFirstLightLevel()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-first-light-level" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "66%";
        }

        return OdfPercent.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-first-light-level".
     */
    public void setExtrusionFirstLightLevel( Double _aExtrusionFirstLightLevel )
    {                    
        String aStringVal = OdfPercent.toString( _aExtrusionFirstLightLevel );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-first-light-level" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-second-light-level".
     */
    public Double getExtrusionSecondLightLevel()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-second-light-level" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "66%";
        }

        return OdfPercent.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-second-light-level".
     */
    public void setExtrusionSecondLightLevel( Double _aExtrusionSecondLightLevel )
    {                    
        String aStringVal = OdfPercent.toString( _aExtrusionSecondLightLevel );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-second-light-level" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-first-light-direction".
     */
    public String getExtrusionFirstLightDirection()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-first-light-direction" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "(5 0 1)";
        }

        return String.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-first-light-direction".
     */
    public void setExtrusionFirstLightDirection( String _aExtrusionFirstLightDirection )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-first-light-direction" ), _aExtrusionFirstLightDirection );
    }

    /**
     * Get value of attribute "draw:extrusion-second-light-direction".
     */
    public String getExtrusionSecondLightDirection()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-second-light-direction" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "(-5 0 1)";
        }

        return String.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-second-light-direction".
     */
    public void setExtrusionSecondLightDirection( String _aExtrusionSecondLightDirection )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-second-light-direction" ), _aExtrusionSecondLightDirection );
    }

    /**
     * Get value of attribute "draw:extrusion-metal".
     */
    public Boolean getExtrusionMetal()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-metal" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-metal".
     */
    public void setExtrusionMetal( Boolean _aExtrusionMetal )
    {                    
        String aStringVal = OdfBoolean.toString( _aExtrusionMetal );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-metal" ), aStringVal );
    }

    /**
     * Get value of attribute "dr3d:shade-mode".
     */
    public OdfShadeModeType getShadeMode()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DR3D, "shade-mode" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "flat";
        }

        return OdfShadeModeType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "dr3d:shade-mode".
     */
    public void setShadeMode( OdfShadeModeType _aShadeMode )
    {                    
        String aStringVal = OdfShadeModeType.toString( _aShadeMode );
        setOdfAttribute( OdfName.get( OdfNamespace.DR3D, "shade-mode" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-rotation-angle".
     */
    public String getExtrusionRotationAngle()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-rotation-angle" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0 0";
        }

        return String.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-rotation-angle".
     */
    public void setExtrusionRotationAngle( String _aExtrusionRotationAngle )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-rotation-angle" ), _aExtrusionRotationAngle );
    }

    /**
     * Get value of attribute "draw:extrusion-rotation-center".
     */
    public String getExtrusionRotationCenter()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-rotation-center" ) );
    }

    /**
     * Set value of attribute "draw:extrusion-rotation-center".
     */
    public void setExtrusionRotationCenter( String _aExtrusionRotationCenter )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-rotation-center" ), _aExtrusionRotationCenter );
    }

    /**
     * Get value of attribute "draw:extrusion-shininess".
     */
    public Double getExtrusionShininess()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-shininess" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "50%";
        }

        return OdfPercent.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-shininess".
     */
    public void setExtrusionShininess( Double _aExtrusionShininess )
    {                    
        String aStringVal = OdfPercent.toString( _aExtrusionShininess );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-shininess" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-skew".
     */
    public Double getExtrusionSkew()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-skew" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "50 45";
        }

        return Double.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-skew".
     */
    public void setExtrusionSkew( Double _aExtrusionSkew )
    {                    
        String aStringVal = Double.toString( _aExtrusionSkew );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-skew" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-specularity".
     */
    public Double getExtrusionSpecularity()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-specularity" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0%";
        }

        return OdfPercent.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-specularity".
     */
    public void setExtrusionSpecularity( Double _aExtrusionSpecularity )
    {                    
        String aStringVal = OdfPercent.toString( _aExtrusionSpecularity );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-specularity" ), aStringVal );
    }

    /**
     * Get value of attribute "dr3d:projection".
     */
    public OdfProjectionType getProjection()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DR3D, "projection" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "parallel";
        }

        return OdfProjectionType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "dr3d:projection".
     */
    public void setProjection( OdfProjectionType _aProjection )
    {                    
        String aStringVal = OdfProjectionType.toString( _aProjection );
        setOdfAttribute( OdfName.get( OdfNamespace.DR3D, "projection" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-viewpoint".
     */
    public String getExtrusionViewpoint()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-viewpoint" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "3.5cm -3.5cm 25cm";
        }

        return String.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-viewpoint".
     */
    public void setExtrusionViewpoint( String _aExtrusionViewpoint )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-viewpoint" ), _aExtrusionViewpoint );
    }

    /**
     * Get value of attribute "draw:extrusion-origin".
     */
    public Double getExtrusionOrigin()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-origin" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0.5 -0.5";
        }

        return Double.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-origin".
     */
    public void setExtrusionOrigin( Double _aExtrusionOrigin )
    {                    
        String aStringVal = Double.toString( _aExtrusionOrigin );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-origin" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:extrusion-color".
     */
    public Boolean getExtrusionColor()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-color" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:extrusion-color".
     */
    public void setExtrusionColor( Boolean _aExtrusionColor )
    {                    
        String aStringVal = OdfBoolean.toString( _aExtrusionColor );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "extrusion-color" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:enhanced-path".
     */
    public String getEnhancedPath()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "enhanced-path" ) );
    }

    /**
     * Set value of attribute "draw:enhanced-path".
     */
    public void setEnhancedPath( String _aEnhancedPath )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "enhanced-path" ), _aEnhancedPath );
    }

    /**
     * Get value of attribute "draw:path-stretchpoint-x".
     */
    public Double getPathStretchpointX()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "path-stretchpoint-x" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0";
        }

        return Double.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:path-stretchpoint-x".
     */
    public void setPathStretchpointX( Double _aPathStretchpointX )
    {                    
        String aStringVal = Double.toString( _aPathStretchpointX );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "path-stretchpoint-x" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:path-stretchpoint-y".
     */
    public Double getPathStretchpointY()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "path-stretchpoint-y" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "0";
        }

        return Double.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:path-stretchpoint-y".
     */
    public void setPathStretchpointY( Double _aPathStretchpointY )
    {                    
        String aStringVal = Double.toString( _aPathStretchpointY );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "path-stretchpoint-y" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:text-areas".
     */
    public String getTextAreas()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-areas" ) );
    }

    /**
     * Set value of attribute "draw:text-areas".
     */
    public void setTextAreas( String _aTextAreas )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-areas" ), _aTextAreas );
    }

    /**
     * Get value of attribute "draw:glue-points".
     */
    public String getGluePoints()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "glue-points" ) );
    }

    /**
     * Set value of attribute "draw:glue-points".
     */
    public void setGluePoints( String _aGluePoints )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "glue-points" ), _aGluePoints );
    }

    /**
     * Get value of attribute "draw:glue-point-type".
     */
    public OdfGluePointType getGluePointType()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "glue-point-type" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "none";
        }

        return OdfGluePointType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:glue-point-type".
     */
    public void setGluePointType( OdfGluePointType _aGluePointType )
    {                    
        String aStringVal = OdfGluePointType.toString( _aGluePointType );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "glue-point-type" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:glue-point-leaving-directions".
     */
    public String getGluePointLeavingDirections()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "glue-point-leaving-directions" ) );
    }

    /**
     * Set value of attribute "draw:glue-point-leaving-directions".
     */
    public void setGluePointLeavingDirections( String _aGluePointLeavingDirections )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "glue-point-leaving-directions" ), _aGluePointLeavingDirections );
    }

    /**
     * Get value of attribute "draw:text-path".
     */
    public Boolean getTextPath()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:text-path".
     */
    public void setTextPath( Boolean _aTextPath )
    {                    
        String aStringVal = OdfBoolean.toString( _aTextPath );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:text-path-mode".
     */
    public OdfTextPathModeType getTextPathMode()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-mode" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "normal";
        }

        return OdfTextPathModeType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:text-path-mode".
     */
    public void setTextPathMode( OdfTextPathModeType _aTextPathMode )
    {                    
        String aStringVal = OdfTextPathModeType.toString( _aTextPathMode );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-mode" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:text-path-scale".
     */
    public OdfTextPathScaleType getTextPathScale()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-scale" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "path";
        }

        return OdfTextPathScaleType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:text-path-scale".
     */
    public void setTextPathScale( OdfTextPathScaleType _aTextPathScale )
    {                    
        String aStringVal = OdfTextPathScaleType.toString( _aTextPathScale );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-scale" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:text-path-same-letter-heights".
     */
    public Boolean getTextPathSameLetterHeights()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-same-letter-heights" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:text-path-same-letter-heights".
     */
    public void setTextPathSameLetterHeights( Boolean _aTextPathSameLetterHeights )
    {                    
        String aStringVal = OdfBoolean.toString( _aTextPathSameLetterHeights );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "text-path-same-letter-heights" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:modifiers".
     */
    public String getModifiers()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "modifiers" ) );
    }

    /**
     * Set value of attribute "draw:modifiers".
     */
    public void setModifiers( String _aModifiers )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "modifiers" ), _aModifiers );
    }

}
