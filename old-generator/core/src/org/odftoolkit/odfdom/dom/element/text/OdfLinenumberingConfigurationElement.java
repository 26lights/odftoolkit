/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.text;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;
import org.odftoolkit.odfdom.dom.element.OdfStylableElement;
import org.odftoolkit.odfdom.dom.type.OdfBoolean;
import org.odftoolkit.odfdom.dom.type.OdfStyleName;
import org.odftoolkit.odfdom.dom.type.OdfNonNegativeInteger;
import org.odftoolkit.odfdom.dom.type.text.OdfNumberPositionType;
import org.odftoolkit.odfdom.dom.type.OdfNonNegativeLength;

;

/**
 * ODF DOM Element implementation for element "<text:linenumbering-configuration>".
 */
public abstract class OdfLinenumberingConfigurationElement extends OdfStylableElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.TEXT, "linenumbering-configuration" );

    public OdfLinenumberingConfigurationElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME, OdfStyleFamily.Text, OdfName.get( OdfNamespace.TEXT, "style-name" ) );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }


    /**
     * Get value of attribute "text:number-lines".
     */
    public Boolean getNumberLines()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "number-lines" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:number-lines".
     */
    public void setNumberLines( Boolean _aNumberLines )
    {                    
        String aStringVal = OdfBoolean.toString( _aNumberLines );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "number-lines" ), aStringVal );
    }

    /**
     * Get value of attribute "style:num-format".
     */
    public String getNumFormat()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.STYLE, "num-format" ) );
    }

    /**
     * Set value of attribute "style:num-format".
     */
    public void setNumFormat( String _aNumFormat )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.STYLE, "num-format" ), _aNumFormat );
    }

    /**
     * Get value of attribute "style:num-letter-sync".
     */
    public Boolean getNumLetterSync()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.STYLE, "num-letter-sync" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "style:num-letter-sync".
     */
    public void setNumLetterSync( Boolean _aNumLetterSync )
    {                    
        String aStringVal = OdfBoolean.toString( _aNumLetterSync );
        setOdfAttribute( OdfName.get( OdfNamespace.STYLE, "num-letter-sync" ), aStringVal );
    }

    /**
     * Get value of attribute "text:style-name".
     */
    public String getStyleName()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "style-name" ) );
        return OdfStyleName.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:style-name".
     */
    public void setStyleName( String _aStyleName )
    {                    
        String aStringVal = OdfStyleName.toString( _aStyleName );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "style-name" ), aStringVal );
    }

    /**
     * Get value of attribute "text:increment".
     */
    public Integer getIncrement()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "increment" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:increment".
     */
    public void setIncrement( Integer _aIncrement )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aIncrement );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "increment" ), aStringVal );
    }

    /**
     * Get value of attribute "text:number-position".
     */
    public OdfNumberPositionType getNumberPosition()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "number-position" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "left";
        }

        return OdfNumberPositionType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:number-position".
     */
    public void setNumberPosition( OdfNumberPositionType _aNumberPosition )
    {                    
        String aStringVal = OdfNumberPositionType.toString( _aNumberPosition );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "number-position" ), aStringVal );
    }

    /**
     * Get value of attribute "text:offset".
     */
    public String getOffset()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "offset" ) );
        return OdfNonNegativeLength.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:offset".
     */
    public void setOffset( String _aOffset )
    {                    
        String aStringVal = OdfNonNegativeLength.toString( _aOffset );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "offset" ), aStringVal );
    }

    /**
     * Get value of attribute "text:count-empty-lines".
     */
    public Boolean getCountEmptyLines()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "count-empty-lines" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:count-empty-lines".
     */
    public void setCountEmptyLines( Boolean _aCountEmptyLines )
    {                    
        String aStringVal = OdfBoolean.toString( _aCountEmptyLines );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "count-empty-lines" ), aStringVal );
    }

    /**
     * Get value of attribute "text:count-in-text-boxes".
     */
    public Boolean getCountInTextBoxes()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "count-in-text-boxes" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:count-in-text-boxes".
     */
    public void setCountInTextBoxes( Boolean _aCountInTextBoxes )
    {                    
        String aStringVal = OdfBoolean.toString( _aCountInTextBoxes );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "count-in-text-boxes" ), aStringVal );
    }

    /**
     * Get value of attribute "text:restart-on-page".
     */
    public Boolean getRestartOnPage()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "restart-on-page" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:restart-on-page".
     */
    public void setRestartOnPage( Boolean _aRestartOnPage )
    {                    
        String aStringVal = OdfBoolean.toString( _aRestartOnPage );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "restart-on-page" ), aStringVal );
    }

    /**
    * Create child element "text:linenumbering-separator".
    */
    public OdfLinenumberingSeparatorElement createLinenumberingSeparatorElement()
    {
        OdfLinenumberingSeparatorElement  _nLinenumberingSeparator = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfLinenumberingSeparatorElement.class);
        this.appendChild( _nLinenumberingSeparator);
        return  _nLinenumberingSeparator;
    }                   
               
}
