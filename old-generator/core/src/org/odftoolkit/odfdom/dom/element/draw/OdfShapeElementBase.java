/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    
package org.odftoolkit.odfdom.dom.element.draw;
import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfStyleablePresentationElement;
import org.odftoolkit.odfdom.dom.type.OdfNonNegativeInteger;
import org.odftoolkit.odfdom.dom.type.OdfId;
import org.odftoolkit.odfdom.dom.type.OdfStyleName;
import java.util.List;
import org.odftoolkit.odfdom.dom.type.OdfStyleNames;
import org.odftoolkit.odfdom.dom.type.OdfCellAddress;
import org.odftoolkit.odfdom.dom.type.OdfBoolean;
import org.odftoolkit.odfdom.dom.type.text.OdfAnchorType;
import org.odftoolkit.odfdom.dom.type.OdfPositiveInteger;


/**
 * ODF DOM base element implementation.
 */
public abstract class OdfShapeElementBase extends OdfStyleablePresentationElement
{
    /**
	 * 
	 */
	private static final long serialVersionUID = 5687732372719552934L;

	public OdfShapeElementBase( OdfFileDom _aOwnerDoc, OdfName element_name )
    {
        super( _aOwnerDoc, element_name );
    }
    /**
     * Initialize mandatory attributes.
     */
    public void init()
    {
    }
      
    /**
     * Get value of attribute "draw:z-index".
     */
    public Integer getZIndex()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "z-index" ) );
        return OdfNonNegativeInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:z-index".
     */
    public void setZIndex( Integer _aZIndex )
    {                    
        String aStringVal = OdfNonNegativeInteger.toString( _aZIndex );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "z-index" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:id".
     */
    public String getDrawid()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "id" ) );
    }

    /**
     * Set value of attribute "draw:id".
     */
    public void setDrawid( String _aDrawid )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "id" ), _aDrawid );
    }

    /**
     * Get value of attribute "xml:id".
     */
    public String getXmlid()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.XML, "id" ) );
        return OdfId.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "xml:id".
     */
    public void setXmlid( String _aXmlid )
    {                    
        String aStringVal = OdfId.toString( _aXmlid );
        setOdfAttribute( OdfName.get( OdfNamespace.XML, "id" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:style-name".
     */
    public String getDrawStyleName()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "style-name" ) );
        return OdfStyleName.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:style-name".
     */
    public void setDrawStyleName( String _aDrawStyleName )
    {                    
        String aStringVal = OdfStyleName.toString( _aDrawStyleName );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "style-name" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:class-names".
     */
    public List<String> getDrawClassNames()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "class-names" ) );
        return OdfStyleNames.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:class-names".
     */
    public void setDrawClassNames( List<String> _aDrawClassNames )
    {                    
        String aStringVal = OdfStyleNames.toString( _aDrawClassNames );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "class-names" ), aStringVal );
    }

    /**
     * Get value of attribute "presentation:style-name".
     */
    public String getPresentationStyleName()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "style-name" ) );
        return OdfStyleName.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "presentation:style-name".
     */
    public void setPresentationStyleName( String _aPresentationStyleName )
    {                    
        String aStringVal = OdfStyleName.toString( _aPresentationStyleName );
        setOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "style-name" ), aStringVal );
    }

    /**
     * Get value of attribute "presentation:class-names".
     */
    public List<String> getPresentationClassNames()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "class-names" ) );
        return OdfStyleNames.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "presentation:class-names".
     */
    public void setPresentationClassNames( List<String> _aPresentationClassNames )
    {                    
        String aStringVal = OdfStyleNames.toString( _aPresentationClassNames );
        setOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "class-names" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:name".
     */
    public String getName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "name" ) );
    }

    /**
     * Set value of attribute "draw:name".
     */
    public void setName( String _aName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "name" ), _aName );
    }

    /**
     * Get value of attribute "table:end-cell-address".
     */
    public String getEndCellAddress()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "end-cell-address" ) );
        return OdfCellAddress.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:end-cell-address".
     */
    public void setEndCellAddress( String _aEndCellAddress )
    {                    
        String aStringVal = OdfCellAddress.toString( _aEndCellAddress );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "end-cell-address" ), aStringVal );
    }

    /**
     * Get value of attribute "table:end-x".
     */
    public String getEndX()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "end-x" ) );
    }

    /**
     * Set value of attribute "table:end-x".
     */
    public void setEndX( String _aEndX )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "end-x" ), _aEndX );
    }

    /**
     * Get value of attribute "table:end-y".
     */
    public String getEndY()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "end-y" ) );
    }

    /**
     * Set value of attribute "table:end-y".
     */
    public void setEndY( String _aEndY )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "end-y" ), _aEndY );
    }

    /**
     * Get value of attribute "table:table-background".
     */
    public Boolean getTableBackground()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "table-background" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:table-background".
     */
    public void setTableBackground( Boolean _aTableBackground )
    {                    
        String aStringVal = OdfBoolean.toString( _aTableBackground );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "table-background" ), aStringVal );
    }

    /**
     * Get value of attribute "text:anchor-type".
     */
    public OdfAnchorType getAnchorType()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "anchor-type" ) );
        return OdfAnchorType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:anchor-type".
     */
    public void setAnchorType( OdfAnchorType _aAnchorType )
    {                    
        String aStringVal = OdfAnchorType.toString( _aAnchorType );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "anchor-type" ), aStringVal );
    }

    /**
     * Get value of attribute "text:anchor-page-number".
     */
    public Integer getAnchorPageNumber()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TEXT, "anchor-page-number" ) );
        return OdfPositiveInteger.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "text:anchor-page-number".
     */
    public void setAnchorPageNumber( Integer _aAnchorPageNumber )
    {                    
        String aStringVal = OdfPositiveInteger.toString( _aAnchorPageNumber );
        setOdfAttribute( OdfName.get( OdfNamespace.TEXT, "anchor-page-number" ), aStringVal );
    }

}
      