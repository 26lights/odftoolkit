/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.draw;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;
import org.odftoolkit.odfdom.dom.element.OdfStylableElement;
import org.odftoolkit.odfdom.dom.type.OdfStyleName;
import org.odftoolkit.odfdom.dom.type.OdfId;

import org.odftoolkit.odfdom.dom.element.svg.OdfTitleElement;
import org.odftoolkit.odfdom.dom.element.svg.OdfDescElement;
import org.odftoolkit.odfdom.dom.element.form.OdfFormElement;
import org.odftoolkit.odfdom.dom.element.xforms.OdfModelElement;
import org.odftoolkit.odfdom.dom.element.dr3d.OdfSceneElement;
import org.odftoolkit.odfdom.dom.element.presentation.OdfAnimationsElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfAnimateElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfSetElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfAnimateMotionElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfAnimateColorElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfAnimateTransformElement;
import org.odftoolkit.odfdom.dom.type.svg.OdfType;
import org.odftoolkit.odfdom.dom.element.anim.OdfTransitionFilterElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfParElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfSeqElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfIterateElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfAudioElement;
import org.odftoolkit.odfdom.dom.element.anim.OdfCommandElement;
import org.odftoolkit.odfdom.dom.element.presentation.OdfNotesElement;

/**
 * ODF DOM Element implementation for element "<draw:page>".
 */
public abstract class OdfPageElement extends OdfStylableElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.DRAW, "page" );

    public OdfPageElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME, OdfStyleFamily.DrawingPage, OdfName.get( OdfNamespace.DRAW, "style-name" ) );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Initialize mandatory attributes.
     */
    public void init(String _aMasterPageName)
    {
        setMasterPageName( _aMasterPageName );
    }

    /**
     * Get value of attribute "presentation:use-header-name".
     */
    public String getUseHeaderName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "use-header-name" ) );
    }

    /**
     * Set value of attribute "presentation:use-header-name".
     */
    public void setUseHeaderName( String _aUseHeaderName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "use-header-name" ), _aUseHeaderName );
    }

    /**
     * Get value of attribute "presentation:use-footer-name".
     */
    public String getUseFooterName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "use-footer-name" ) );
    }

    /**
     * Set value of attribute "presentation:use-footer-name".
     */
    public void setUseFooterName( String _aUseFooterName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "use-footer-name" ), _aUseFooterName );
    }

    /**
     * Get value of attribute "presentation:use-date-time-name".
     */
    public String getUseDateTimeName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "use-date-time-name" ) );
    }

    /**
     * Set value of attribute "presentation:use-date-time-name".
     */
    public void setUseDateTimeName( String _aUseDateTimeName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "use-date-time-name" ), _aUseDateTimeName );
    }

    /**
     * Get value of attribute "draw:name".
     */
    public String getName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "name" ) );
    }

    /**
     * Set value of attribute "draw:name".
     */
    public void setName( String _aName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "name" ), _aName );
    }

    /**
     * Get value of attribute "draw:style-name".
     */
    public String getDrawStyleName()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "style-name" ) );
        return OdfStyleName.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:style-name".
     */
    public void setDrawStyleName( String _aDrawStyleName )
    {                    
        String aStringVal = OdfStyleName.toString( _aDrawStyleName );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "style-name" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:master-page-name".
     */
    public String getMasterPageName()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "master-page-name" ) );
        return OdfStyleName.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:master-page-name".
     */
    public void setMasterPageName( String _aMasterPageName )
    {                    
        String aStringVal = OdfStyleName.toString( _aMasterPageName );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "master-page-name" ), aStringVal );
    }

    /**
     * Get value of attribute "presentation:presentation-page-layout-name".
     */
    public String getPresentationPageLayoutName()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "presentation-page-layout-name" ) );
        return OdfStyleName.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "presentation:presentation-page-layout-name".
     */
    public void setPresentationPageLayoutName( String _aPresentationPageLayoutName )
    {                    
        String aStringVal = OdfStyleName.toString( _aPresentationPageLayoutName );
        setOdfAttribute( OdfName.get( OdfNamespace.PRESENTATION, "presentation-page-layout-name" ), aStringVal );
    }

    /**
     * Get value of attribute "draw:id".
     */
    public String getDrawid()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "id" ) );
    }

    /**
     * Set value of attribute "draw:id".
     */
    public void setDrawid( String _aDrawid )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "id" ), _aDrawid );
    }

    /**
     * Get value of attribute "draw:nav-order".
     */
    public String getNavOrder()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.DRAW, "nav-order" ) );
        return OdfId.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "draw:nav-order".
     */
    public void setNavOrder( String _aNavOrder )
    {                    
        String aStringVal = OdfId.toString( _aNavOrder );
        setOdfAttribute( OdfName.get( OdfNamespace.DRAW, "nav-order" ), aStringVal );
    }

    /**
     * Get value of attribute "xml:id".
     */
    public String getXmlid()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.XML, "id" ) );
        return OdfId.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "xml:id".
     */
    public void setXmlid( String _aXmlid )
    {                    
        String aStringVal = OdfId.toString( _aXmlid );
        setOdfAttribute( OdfName.get( OdfNamespace.XML, "id" ), aStringVal );
    }

    /**
    * Create child element "svg:title".
    */
    public OdfTitleElement createTitleElement()
    {
        OdfTitleElement  _nTitle = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfTitleElement.class);
        this.appendChild( _nTitle);
        return  _nTitle;
    }                   
               
    /**
    * Create child element "svg:desc".
    */
    public OdfDescElement createDescElement()
    {
        OdfDescElement  _nDesc = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDescElement.class);
        this.appendChild( _nDesc);
        return  _nDesc;
    }                   
               
    /**
    * Create child element "draw:layer-set".
    */
    public OdfLayerSetElement createLayerSetElement()
    {
        OdfLayerSetElement  _nLayerSet = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfLayerSetElement.class);
        this.appendChild( _nLayerSet);
        return  _nLayerSet;
    }                   
               
    /**
    * Create child element "form:form".
    */
    public OdfFormElement createFormElement()
    {
        OdfFormElement  _nForm = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfFormElement.class);
        this.appendChild( _nForm);
        return  _nForm;
    }                   
               
    /**
    * Create child element "xforms:model".
    */
    public OdfModelElement createModelElement()
    {
        OdfModelElement  _nModel = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfModelElement.class);
        this.appendChild( _nModel);
        return  _nModel;
    }                   
               
    /**
    * Create child element "draw:rect".
    */
    public OdfRectElement createRectElement()
    {
        OdfRectElement  _nRect = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfRectElement.class);
        this.appendChild( _nRect);
        return  _nRect;
    }                   
               
    /**
    * Create child element "draw:line".
    */
    public OdfLineElement createLineElement(String   _aX1, String   _aY1, String   _aX2, String   _aY2)
    {
        OdfLineElement  _nLine = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfLineElement.class);
        _nLine.setX1( _aX1);
        _nLine.setY1( _aY1);
        _nLine.setX2( _aX2);
        _nLine.setY2( _aY2);
        this.appendChild( _nLine);
        return  _nLine;      
    }
    
    /**
    * Create child element "draw:polyline".
    */
    public OdfPolylineElement createPolylineElement(String   _aPoints, Integer   _aViewBox)
    {
        OdfPolylineElement  _nPolyline = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPolylineElement.class);
        _nPolyline.setPoints( _aPoints);
        _nPolyline.setViewBox( _aViewBox);
        this.appendChild( _nPolyline);
        return  _nPolyline;      
    }
    
    /**
    * Create child element "draw:polygon".
    */
    public OdfPolygonElement createPolygonElement(String   _aPoints, Integer   _aViewBox)
    {
        OdfPolygonElement  _nPolygon = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPolygonElement.class);
        _nPolygon.setPoints( _aPoints);
        _nPolygon.setViewBox( _aViewBox);
        this.appendChild( _nPolygon);
        return  _nPolygon;      
    }
    
    /**
    * Create child element "draw:regular-polygon".
    */
    public OdfRegularPolygonElement createRegularPolygonElement(Integer   _aCorners, Boolean   _aConcave)
    {
        OdfRegularPolygonElement  _nRegularPolygon = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfRegularPolygonElement.class);
        _nRegularPolygon.setCorners( _aCorners);
        _nRegularPolygon.setConcave( _aConcave);
        this.appendChild( _nRegularPolygon);
        return  _nRegularPolygon;      
    }
    
    /**
    * Create child element "draw:regular-polygon".
    */
    public OdfRegularPolygonElement createRegularPolygonElement(Boolean   _aConcave, Integer   _aCorners)
    {
        OdfRegularPolygonElement  _nRegularPolygon = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfRegularPolygonElement.class);
        _nRegularPolygon.setConcave( _aConcave);
        _nRegularPolygon.setCorners( _aCorners);
        this.appendChild( _nRegularPolygon);
        return  _nRegularPolygon;      
    }
    
    /**
    * Create child element "draw:path".
    */
    public OdfPathElement createPathElement(String   _aD, Integer   _aViewBox)
    {
        OdfPathElement  _nPath = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPathElement.class);
        _nPath.setD( _aD);
        _nPath.setViewBox( _aViewBox);
        this.appendChild( _nPath);
        return  _nPath;      
    }
    
    /**
    * Create child element "draw:circle".
    */
    public OdfCircleElement createCircleElement()
    {
        OdfCircleElement  _nCircle = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfCircleElement.class);
        this.appendChild( _nCircle);
        return  _nCircle;
    }                   
               
    /**
    * Create child element "draw:ellipse".
    */
    public OdfEllipseElement createEllipseElement()
    {
        OdfEllipseElement  _nEllipse = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfEllipseElement.class);
        this.appendChild( _nEllipse);
        return  _nEllipse;
    }                   
               
    /**
    * Create child element "draw:g".
    */
    public OdfGroupElement createGroupElement()
    {
        OdfGroupElement  _nGroup = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfGroupElement.class);
        this.appendChild( _nGroup);
        return  _nGroup;
    }                   
               
    /**
    * Create child element "draw:page-thumbnail".
    */
    public OdfPageThumbnailElement createPageThumbnailElement()
    {
        OdfPageThumbnailElement  _nPageThumbnail = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfPageThumbnailElement.class);
        this.appendChild( _nPageThumbnail);
        return  _nPageThumbnail;
    }                   
               
    /**
    * Create child element "draw:frame".
    */
    public OdfFrameElement createFrameElement()
    {
        OdfFrameElement  _nFrame = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfFrameElement.class);
        this.appendChild( _nFrame);
        return  _nFrame;
    }                   
               
    /**
    * Create child element "draw:measure".
    */
    public org.odftoolkit.odfdom.dom.element.draw.OdfMeasureElement createdrawMeasureElement(String   _aX1, String   _aY1, String   _aX2, String   _aY2)
    {
        org.odftoolkit.odfdom.dom.element.draw.OdfMeasureElement  _nMeasure = ((OdfFileDom)this.ownerDocument).createOdfElement(org.odftoolkit.odfdom.dom.element.draw.OdfMeasureElement.class);
        _nMeasure.setX1( _aX1);
        _nMeasure.setY1( _aY1);
        _nMeasure.setX2( _aX2);
        _nMeasure.setY2( _aY2);
        this.appendChild( _nMeasure);
        return  _nMeasure;      
    }
    
    /**
    * Create child element "draw:caption".
    */
    public OdfCaptionElement createCaptionElement()
    {
        OdfCaptionElement  _nCaption = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfCaptionElement.class);
        this.appendChild( _nCaption);
        return  _nCaption;
    }                   
               
    /**
    * Create child element "draw:connector".
    */
    public OdfConnectorElement createConnectorElement(Integer   _aViewBox)
    {
        OdfConnectorElement  _nConnector = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfConnectorElement.class);
        _nConnector.setViewBox( _aViewBox);
        this.appendChild( _nConnector);
        return  _nConnector;      
    }
    
    /**
    * Create child element "draw:control".
    */
    public OdfControlElement createControlElement(String   _aControl)
    {
        OdfControlElement  _nControl = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfControlElement.class);
        _nControl.setControl( _aControl);
        this.appendChild( _nControl);
        return  _nControl;      
    }
    
    /**
    * Create child element "dr3d:scene".
    */
    public OdfSceneElement createSceneElement()
    {
        OdfSceneElement  _nScene = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfSceneElement.class);
        this.appendChild( _nScene);
        return  _nScene;
    }                   
               
    /**
    * Create child element "draw:custom-shape".
    */
    public OdfCustomShapeElement createCustomShapeElement()
    {
        OdfCustomShapeElement  _nCustomShape = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfCustomShapeElement.class);
        this.appendChild( _nCustomShape);
        return  _nCustomShape;
    }                   
               
    /**
    * Create child element "draw:a".
    */
    public org.odftoolkit.odfdom.dom.element.draw.OdfHyperlinkElement createdrawHyperlinkElement(String   _aHref)
    {
        org.odftoolkit.odfdom.dom.element.draw.OdfHyperlinkElement  _nHyperlink = ((OdfFileDom)this.ownerDocument).createOdfElement(org.odftoolkit.odfdom.dom.element.draw.OdfHyperlinkElement.class);
        _nHyperlink.setHref( _aHref);
        this.appendChild( _nHyperlink);
        return  _nHyperlink;      
    }
    
    /**
    * Create child element "presentation:animations".
    */
    public OdfAnimationsElement createAnimationsElement()
    {
        OdfAnimationsElement  _nAnimations = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfAnimationsElement.class);
        this.appendChild( _nAnimations);
        return  _nAnimations;
    }                   
               
    /**
    * Create child element "anim:animate".
    */
    public OdfAnimateElement createAnimateElement(String   _aAttributeName)
    {
        OdfAnimateElement  _nAnimate = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfAnimateElement.class);
        _nAnimate.setAttributeName( _aAttributeName);
        this.appendChild( _nAnimate);
        return  _nAnimate;      
    }
    
    /**
    * Create child element "anim:set".
    */
    public OdfSetElement createSetElement(String   _aAttributeName)
    {
        OdfSetElement  _nSet = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfSetElement.class);
        _nSet.setAttributeName( _aAttributeName);
        this.appendChild( _nSet);
        return  _nSet;      
    }
    
    /**
    * Create child element "anim:animateMotion".
    */
    public OdfAnimateMotionElement createAnimateMotionElement(String   _aAttributeName)
    {
        OdfAnimateMotionElement  _nAnimateMotion = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfAnimateMotionElement.class);
        _nAnimateMotion.setAttributeName( _aAttributeName);
        this.appendChild( _nAnimateMotion);
        return  _nAnimateMotion;      
    }
    
    /**
    * Create child element "anim:animateColor".
    */
    public OdfAnimateColorElement createAnimateColorElement(String   _aAttributeName)
    {
        OdfAnimateColorElement  _nAnimateColor = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfAnimateColorElement.class);
        _nAnimateColor.setAttributeName( _aAttributeName);
        this.appendChild( _nAnimateColor);
        return  _nAnimateColor;      
    }
    
    /**
    * Create child element "anim:animateTransform".
    */
    public OdfAnimateTransformElement createAnimateTransformElement(String   _aAttributeName, OdfType   _aType)
    {
        OdfAnimateTransformElement  _nAnimateTransform = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfAnimateTransformElement.class);
        _nAnimateTransform.setAttributeName( _aAttributeName);
        _nAnimateTransform.setType( _aType);
        this.appendChild( _nAnimateTransform);
        return  _nAnimateTransform;      
    }
    
    /**
    * Create child element "anim:transitionFilter".
    */
    public OdfTransitionFilterElement createTransitionFilterElement(String   _aType)
    {
        OdfTransitionFilterElement  _nTransitionFilter = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfTransitionFilterElement.class);
        _nTransitionFilter.setType( _aType);
        this.appendChild( _nTransitionFilter);
        return  _nTransitionFilter;      
    }
    
    /**
    * Create child element "anim:par".
    */
    public OdfParElement createParElement()
    {
        OdfParElement  _nPar = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfParElement.class);
        this.appendChild( _nPar);
        return  _nPar;
    }                   
               
    /**
    * Create child element "anim:seq".
    */
    public OdfSeqElement createSeqElement()
    {
        OdfSeqElement  _nSeq = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfSeqElement.class);
        this.appendChild( _nSeq);
        return  _nSeq;
    }                   
               
    /**
    * Create child element "anim:iterate".
    */
    public OdfIterateElement createIterateElement()
    {
        OdfIterateElement  _nIterate = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfIterateElement.class);
        this.appendChild( _nIterate);
        return  _nIterate;
    }                   
               
    /**
    * Create child element "anim:audio".
    */
    public OdfAudioElement createAudioElement()
    {
        OdfAudioElement  _nAudio = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfAudioElement.class);
        this.appendChild( _nAudio);
        return  _nAudio;
    }                   
               
    /**
    * Create child element "anim:command".
    */
    public OdfCommandElement createCommandElement(String   _aCommand)
    {
        OdfCommandElement  _nCommand = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfCommandElement.class);
        _nCommand.setCommand( _aCommand);
        this.appendChild( _nCommand);
        return  _nCommand;      
    }
    
    /**
    * Create child element "presentation:notes".
    */
    public OdfNotesElement createNotesElement()
    {
        OdfNotesElement  _nNotes = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfNotesElement.class);
        this.appendChild( _nNotes);
        return  _nNotes;
    }                   
               
}
