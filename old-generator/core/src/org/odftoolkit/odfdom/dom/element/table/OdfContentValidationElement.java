/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.table;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.type.OdfCellAddress;
import org.odftoolkit.odfdom.dom.type.OdfBoolean;
import org.odftoolkit.odfdom.dom.type.table.OdfDisplayListType;

import org.odftoolkit.odfdom.dom.element.office.OdfEventListenersElement;

/**
 * ODF DOM Element implementation for element "<table:content-validation>".
 */
public abstract class OdfContentValidationElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.TABLE, "content-validation" );

    public OdfContentValidationElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Initialize mandatory attributes.
     */
    public void init(String _aName)
    {
        setName( _aName );
    }

    /**
     * Get value of attribute "table:name".
     */
    public String getName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "name" ) );
    }

    /**
     * Set value of attribute "table:name".
     */
    public void setName( String _aName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "name" ), _aName );
    }

    /**
     * Get value of attribute "table:condition".
     */
    public String getCondition()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "condition" ) );
    }

    /**
     * Set value of attribute "table:condition".
     */
    public void setCondition( String _aCondition )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "condition" ), _aCondition );
    }

    /**
     * Get value of attribute "table:base-cell-address".
     */
    public String getBaseCellAddress()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "base-cell-address" ) );
        return OdfCellAddress.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:base-cell-address".
     */
    public void setBaseCellAddress( String _aBaseCellAddress )
    {                    
        String aStringVal = OdfCellAddress.toString( _aBaseCellAddress );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "base-cell-address" ), aStringVal );
    }

    /**
     * Get value of attribute "table:allow-empty-cell".
     */
    public Boolean getAllowEmptyCell()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "allow-empty-cell" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "true";
        }

        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:allow-empty-cell".
     */
    public void setAllowEmptyCell( Boolean _aAllowEmptyCell )
    {                    
        String aStringVal = OdfBoolean.toString( _aAllowEmptyCell );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "allow-empty-cell" ), aStringVal );
    }

    /**
     * Get value of attribute "table:display-list".
     */
    public OdfDisplayListType getDisplayList()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "display-list" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "unsorted";
        }

        return OdfDisplayListType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:display-list".
     */
    public void setDisplayList( OdfDisplayListType _aDisplayList )
    {                    
        String aStringVal = OdfDisplayListType.toString( _aDisplayList );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "display-list" ), aStringVal );
    }

    /**
    * Create child element "table:help-message".
    */
    public OdfHelpMessageElement createHelpMessageElement()
    {
        OdfHelpMessageElement  _nHelpMessage = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfHelpMessageElement.class);
        this.appendChild( _nHelpMessage);
        return  _nHelpMessage;
    }                   
               
    /**
    * Create child element "table:error-message".
    */
    public OdfErrorMessageElement createErrorMessageElement()
    {
        OdfErrorMessageElement  _nErrorMessage = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfErrorMessageElement.class);
        this.appendChild( _nErrorMessage);
        return  _nErrorMessage;
    }                   
               
    /**
    * Create child element "table:error-macro".
    */
    public OdfErrorMacroElement createErrorMacroElement()
    {
        OdfErrorMacroElement  _nErrorMacro = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfErrorMacroElement.class);
        this.appendChild( _nErrorMacro);
        return  _nErrorMacro;
    }                   
               
    /**
    * Create child element "office:event-listeners".
    */
    public OdfEventListenersElement createEventListenersElement()
    {
        OdfEventListenersElement  _nEventListeners = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfEventListenersElement.class);
        this.appendChild( _nEventListeners);
        return  _nEventListeners;
    }                   
               
}
