/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.table;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.type.table.OdfOrientationType;

import org.odftoolkit.odfdom.dom.type.table.OdfFieldReferenceType;
import org.odftoolkit.odfdom.dom.type.table.OdfMemberType;
import org.odftoolkit.odfdom.dom.type.table.OdfFieldReferenceType;
import org.odftoolkit.odfdom.dom.type.table.OdfGroupedByType;
import javax.xml.datatype.XMLGregorianCalendar;

/**
 * ODF DOM Element implementation for element "<table:data-pilot-field>".
 */
public abstract class OdfDataPilotFieldElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.TABLE, "data-pilot-field" );

    public OdfDataPilotFieldElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Initialize mandatory attributes.
     */
    public void init(String _aSourceFieldName, OdfOrientationType _aOrientation, String _aSelectedPage)
    {
        setSourceFieldName( _aSourceFieldName );
        setOrientation( _aOrientation );
        setSelectedPage( _aSelectedPage );
    }

    /**
     * Get value of attribute "table:source-field-name".
     */
    public String getSourceFieldName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "source-field-name" ) );
    }

    /**
     * Set value of attribute "table:source-field-name".
     */
    public void setSourceFieldName( String _aSourceFieldName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "source-field-name" ), _aSourceFieldName );
    }

    /**
     * Get value of attribute "table:orientation".
     */
    public OdfOrientationType getOrientation()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "orientation" ) );
        return OdfOrientationType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:orientation".
     */
    public void setOrientation( OdfOrientationType _aOrientation )
    {                    
        String aStringVal = OdfOrientationType.toString( _aOrientation );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "orientation" ), aStringVal );
    }

    /**
     * Get value of attribute "table:selected-page".
     */
    public String getSelectedPage()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "selected-page" ) );
    }

    /**
     * Set value of attribute "table:selected-page".
     */
    public void setSelectedPage( String _aSelectedPage )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "selected-page" ), _aSelectedPage );
    }

    /**
     * Get value of attribute "table:is-data-layout-field".
     */
    public String getIsDataLayoutField()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "is-data-layout-field" ) );
    }

    /**
     * Set value of attribute "table:is-data-layout-field".
     */
    public void setIsDataLayoutField( String _aIsDataLayoutField )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "is-data-layout-field" ), _aIsDataLayoutField );
    }

    /**
     * Get value of attribute "table:function".
     */
    public String getFunction()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "function" ) );
    }

    /**
     * Set value of attribute "table:function".
     */
    public void setFunction( String _aFunction )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "function" ), _aFunction );
    }

    /**
     * Get value of attribute "table:used-hierarchy".
     */
    public Integer getUsedHierarchy()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "used-hierarchy" ) );
        if( aStringVal.length()==0 )
        {
            aStringVal = "-1";
        }

        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:used-hierarchy".
     */
    public void setUsedHierarchy( Integer _aUsedHierarchy )
    {                    
        String aStringVal = Integer.toString( _aUsedHierarchy );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "used-hierarchy" ), aStringVal );
    }

    /**
    * Create child element "table:data-pilot-level".
    */
    public OdfDataPilotLevelElement createDataPilotLevelElement()
    {
        OdfDataPilotLevelElement  _nDataPilotLevel = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotLevelElement.class);
        this.appendChild( _nDataPilotLevel);
        return  _nDataPilotLevel;
    }                   
               
    /**
    * Create child element "table:data-pilot-field-reference".
    */
    public OdfDataPilotFieldReferenceElement createDataPilotFieldReferenceElement(String   _aFieldName, OdfFieldReferenceType   _aType, OdfMemberType   _aMemberType)
    {
        OdfDataPilotFieldReferenceElement  _nDataPilotFieldReference = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotFieldReferenceElement.class);
        _nDataPilotFieldReference.setFieldName( _aFieldName);
        _nDataPilotFieldReference.setType( _aType);
        _nDataPilotFieldReference.setMemberType( _aMemberType);
        this.appendChild( _nDataPilotFieldReference);
        return  _nDataPilotFieldReference;      
    }
    
    /**
    * Create child element "table:data-pilot-field-reference".
    */
    public OdfDataPilotFieldReferenceElement createDataPilotFieldReferenceElement(OdfMemberType   _aMemberType, String   _aMemberName, String   _aFieldName, OdfFieldReferenceType   _aType)
    {
        OdfDataPilotFieldReferenceElement  _nDataPilotFieldReference = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotFieldReferenceElement.class);
        _nDataPilotFieldReference.setMemberType( _aMemberType);
        _nDataPilotFieldReference.setMemberName( _aMemberName);
        _nDataPilotFieldReference.setFieldName( _aFieldName);
        _nDataPilotFieldReference.setType( _aType);
        this.appendChild( _nDataPilotFieldReference);
        return  _nDataPilotFieldReference;      
    }
    
    /**
    * Create child element "table:data-pilot-groups".
    */
    public OdfDataPilotGroupsElement createDataPilotGroupsElement(String   _aSourceFieldName, Double   _aStep, OdfGroupedByType   _aGroupedBy, XMLGregorianCalendar   _aDateStart)
    {
        OdfDataPilotGroupsElement  _nDataPilotGroups = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotGroupsElement.class);
        _nDataPilotGroups.setSourceFieldName( _aSourceFieldName);
        _nDataPilotGroups.setStep( _aStep);
        _nDataPilotGroups.setGroupedBy( _aGroupedBy);
        _nDataPilotGroups.setDateStart( _aDateStart);
        this.appendChild( _nDataPilotGroups);
        return  _nDataPilotGroups;      
    }
    
    /**
    * Create child element "table:data-pilot-groups".
    */
    public OdfDataPilotGroupsElement createDataPilotGroupsElement(String   _aSourceFieldName, Double   _aStep, OdfGroupedByType   _aGroupedBy, Double   _aStart)
    {
        OdfDataPilotGroupsElement  _nDataPilotGroups = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotGroupsElement.class);
        _nDataPilotGroups.setSourceFieldName( _aSourceFieldName);
        _nDataPilotGroups.setStep( _aStep);
        _nDataPilotGroups.setGroupedBy( _aGroupedBy);
        _nDataPilotGroups.setStart( _aStart);
        this.appendChild( _nDataPilotGroups);
        return  _nDataPilotGroups;      
    }
    
}
