/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.table;

import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.type.OdfBoolean;

import org.odftoolkit.odfdom.dom.type.table.OdfDisplayMemberModeType;
import org.odftoolkit.odfdom.dom.type.table.OdfDisplayMemberModeType;
import org.odftoolkit.odfdom.dom.type.table.OdfOrderType;
import org.odftoolkit.odfdom.dom.type.table.OdfSortModeType;
import org.odftoolkit.odfdom.dom.type.table.OdfLayoutModeType;

/**
 * ODF DOM Element implementation for element "<table:data-pilot-level>".
 */
public abstract class OdfDataPilotLevelElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.TABLE, "data-pilot-level" );

    public OdfDataPilotLevelElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }


    /**
     * Get value of attribute "table:show-empty".
     */
    public Boolean getShowEmpty()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.TABLE, "show-empty" ) );
        return OdfBoolean.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "table:show-empty".
     */
    public void setShowEmpty( Boolean _aShowEmpty )
    {                    
        String aStringVal = OdfBoolean.toString( _aShowEmpty );
        setOdfAttribute( OdfName.get( OdfNamespace.TABLE, "show-empty" ), aStringVal );
    }

    /**
    * Create child element "table:data-pilot-subtotals".
    */
    public OdfDataPilotSubtotalsElement createDataPilotSubtotalsElement()
    {
        OdfDataPilotSubtotalsElement  _nDataPilotSubtotals = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotSubtotalsElement.class);
        this.appendChild( _nDataPilotSubtotals);
        return  _nDataPilotSubtotals;
    }                   
               
    /**
    * Create child element "table:data-pilot-members".
    */
    public OdfDataPilotMembersElement createDataPilotMembersElement()
    {
        OdfDataPilotMembersElement  _nDataPilotMembers = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotMembersElement.class);
        this.appendChild( _nDataPilotMembers);
        return  _nDataPilotMembers;
    }                   
               
    /**
    * Create child element "table:data-pilot-display-info".
    */
    public OdfDataPilotDisplayInfoElement createDataPilotDisplayInfoElement(Boolean   _aEnabled, String   _aDataField, Integer   _aMemberCount, OdfDisplayMemberModeType   _aDisplayMemberMode)
    {
        OdfDataPilotDisplayInfoElement  _nDataPilotDisplayInfo = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotDisplayInfoElement.class);
        _nDataPilotDisplayInfo.setEnabled( _aEnabled);
        _nDataPilotDisplayInfo.setDataField( _aDataField);
        _nDataPilotDisplayInfo.setMemberCount( _aMemberCount);
        _nDataPilotDisplayInfo.setDisplayMemberMode( _aDisplayMemberMode);
        this.appendChild( _nDataPilotDisplayInfo);
        return  _nDataPilotDisplayInfo;      
    }
    
    /**
    * Create child element "table:data-pilot-sort-info".
    */
    public OdfDataPilotSortInfoElement createDataPilotSortInfoElement(OdfOrderType   _aOrder, OdfSortModeType   _aSortMode)
    {
        OdfDataPilotSortInfoElement  _nDataPilotSortInfo = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotSortInfoElement.class);
        _nDataPilotSortInfo.setOrder( _aOrder);
        _nDataPilotSortInfo.setSortMode( _aSortMode);
        this.appendChild( _nDataPilotSortInfo);
        return  _nDataPilotSortInfo;      
    }
    
    /**
    * Create child element "table:data-pilot-sort-info".
    */
    public OdfDataPilotSortInfoElement createDataPilotSortInfoElement(OdfSortModeType   _aSortMode, String   _aDataField, OdfOrderType   _aOrder)
    {
        OdfDataPilotSortInfoElement  _nDataPilotSortInfo = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotSortInfoElement.class);
        _nDataPilotSortInfo.setSortMode( _aSortMode);
        _nDataPilotSortInfo.setDataField( _aDataField);
        _nDataPilotSortInfo.setOrder( _aOrder);
        this.appendChild( _nDataPilotSortInfo);
        return  _nDataPilotSortInfo;      
    }
    
    /**
    * Create child element "table:data-pilot-layout-info".
    */
    public OdfDataPilotLayoutInfoElement createDataPilotLayoutInfoElement(OdfLayoutModeType   _aLayoutMode, Boolean   _aAddEmptyLines)
    {
        OdfDataPilotLayoutInfoElement  _nDataPilotLayoutInfo = ((OdfFileDom)this.ownerDocument).createOdfElement(OdfDataPilotLayoutInfoElement.class);
        _nDataPilotLayoutInfo.setLayoutMode( _aLayoutMode);
        _nDataPilotLayoutInfo.setAddEmptyLines( _aAddEmptyLines);
        this.appendChild( _nDataPilotLayoutInfo);
        return  _nDataPilotLayoutInfo;      
    }
    
}
