/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.dom.element.style;

import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.dom.OdfName;
import org.odftoolkit.odfdom.dom.OdfNamespace;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.type.style.OdfFontFamilyGenericType;
import org.odftoolkit.odfdom.dom.type.style.OdfFontPitchType;
import org.odftoolkit.odfdom.dom.type.svg.OdfFontStretchType;
import org.odftoolkit.odfdom.dom.type.svg.OdfFontStyleType;
import org.odftoolkit.odfdom.dom.type.svg.OdfFontVariantType;
import org.odftoolkit.odfdom.dom.type.svg.OdfFontWeightType;


/**
 * ODF DOM Element implementation for element "<style:font-face>".
 */
public abstract class OdfFontFaceElement extends OdfElement
{        
    public static final OdfName ELEMENT_NAME = OdfName.get( OdfNamespace.STYLE, "font-face" );

    public OdfFontFaceElement( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc, ELEMENT_NAME );
    }

    public OdfName getOdfName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Initialize mandatory attributes.
     */
    public void init(String _aName)
    {
        setName( _aName );
    }

    /**
     * Get value of attribute "svg:font-family".
     */
    public String getFontFamily()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-family" ) );
    }

    /**
     * Set value of attribute "svg:font-family".
     */
    public void setFontFamily( String _aFontFamily )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-family" ), _aFontFamily );
    }

    /**
     * Get value of attribute "svg:font-style".
     */
    public OdfFontStyleType getFontStyle()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-style" ) );
        return OdfFontStyleType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:font-style".
     */
    public void setFontStyle( OdfFontStyleType _aFontStyle )
    {                    
        String aStringVal = OdfFontStyleType.toString( _aFontStyle );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-style" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:font-variant".
     */
    public OdfFontVariantType getFontVariant()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-variant" ) );
        return OdfFontVariantType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:font-variant".
     */
    public void setFontVariant( OdfFontVariantType _aFontVariant )
    {                    
        String aStringVal = OdfFontVariantType.toString( _aFontVariant );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-variant" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:font-weight".
     */
    public OdfFontWeightType getFontWeight()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-weight" ) );
        return OdfFontWeightType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:font-weight".
     */
    public void setFontWeight( OdfFontWeightType _aFontWeight )
    {                    
        String aStringVal = OdfFontWeightType.toString( _aFontWeight );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-weight" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:font-stretch".
     */
    public OdfFontStretchType getFontStretch()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-stretch" ) );
        return OdfFontStretchType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:font-stretch".
     */
    public void setFontStretch( OdfFontStretchType _aFontStretch )
    {                    
        String aStringVal = OdfFontStretchType.toString( _aFontStretch );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-stretch" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:font-size".
     */
    public String getFontSize()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-size" ) );
    }

    /**
     * Set value of attribute "svg:font-size".
     */
    public void setFontSize( String _aFontSize )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "font-size" ), _aFontSize );
    }

    /**
     * Get value of attribute "svg:unicode-range".
     */
    public String getUnicodeRange()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SVG, "unicode-range" ) );
    }

    /**
     * Set value of attribute "svg:unicode-range".
     */
    public void setUnicodeRange( String _aUnicodeRange )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "unicode-range" ), _aUnicodeRange );
    }

    /**
     * Get value of attribute "svg:units-per-em".
     */
    public Integer getUnitsPerEm()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "units-per-em" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:units-per-em".
     */
    public void setUnitsPerEm( Integer _aUnitsPerEm )
    {                    
        String aStringVal = Integer.toString( _aUnitsPerEm );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "units-per-em" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:panose-1".
     */
    public String getPanose1()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SVG, "panose-1" ) );
    }

    /**
     * Set value of attribute "svg:panose-1".
     */
    public void setPanose1( String _aPanose1 )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "panose-1" ), _aPanose1 );
    }

    /**
     * Get value of attribute "svg:stemv".
     */
    public Integer getStemv()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "stemv" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:stemv".
     */
    public void setStemv( Integer _aStemv )
    {                    
        String aStringVal = Integer.toString( _aStemv );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "stemv" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:stemh".
     */
    public Integer getStemh()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "stemh" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:stemh".
     */
    public void setStemh( Integer _aStemh )
    {                    
        String aStringVal = Integer.toString( _aStemh );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "stemh" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:slope".
     */
    public Integer getSlope()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "slope" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:slope".
     */
    public void setSlope( Integer _aSlope )
    {                    
        String aStringVal = Integer.toString( _aSlope );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "slope" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:cap-height".
     */
    public Integer getCapHeight()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "cap-height" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:cap-height".
     */
    public void setCapHeight( Integer _aCapHeight )
    {                    
        String aStringVal = Integer.toString( _aCapHeight );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "cap-height" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:x-height".
     */
    public Integer getXHeight()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "x-height" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:x-height".
     */
    public void setXHeight( Integer _aXHeight )
    {                    
        String aStringVal = Integer.toString( _aXHeight );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "x-height" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:accent-height".
     */
    public Integer getAccentHeight()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "accent-height" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:accent-height".
     */
    public void setAccentHeight( Integer _aAccentHeight )
    {                    
        String aStringVal = Integer.toString( _aAccentHeight );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "accent-height" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:ascent".
     */
    public Integer getAscent()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "ascent" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:ascent".
     */
    public void setAscent( Integer _aAscent )
    {                    
        String aStringVal = Integer.toString( _aAscent );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "ascent" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:descent".
     */
    public Integer getDescent()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "descent" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:descent".
     */
    public void setDescent( Integer _aDescent )
    {                    
        String aStringVal = Integer.toString( _aDescent );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "descent" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:widths".
     */
    public String getWidths()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SVG, "widths" ) );
    }

    /**
     * Set value of attribute "svg:widths".
     */
    public void setWidths( String _aWidths )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "widths" ), _aWidths );
    }

    /**
     * Get value of attribute "svg:bbox".
     */
    public String getBbox()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.SVG, "bbox" ) );
    }

    /**
     * Set value of attribute "svg:bbox".
     */
    public void setBbox( String _aBbox )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "bbox" ), _aBbox );
    }

    /**
     * Get value of attribute "svg:ideographic".
     */
    public Integer getIdeographic()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "ideographic" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:ideographic".
     */
    public void setIdeographic( Integer _aIdeographic )
    {                    
        String aStringVal = Integer.toString( _aIdeographic );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "ideographic" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:alphabetic".
     */
    public Integer getAlphabetic()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "alphabetic" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:alphabetic".
     */
    public void setAlphabetic( Integer _aAlphabetic )
    {                    
        String aStringVal = Integer.toString( _aAlphabetic );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "alphabetic" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:mathematical".
     */
    public Integer getMathematical()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "mathematical" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:mathematical".
     */
    public void setMathematical( Integer _aMathematical )
    {                    
        String aStringVal = Integer.toString( _aMathematical );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "mathematical" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:hanging".
     */
    public Integer getHanging()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "hanging" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:hanging".
     */
    public void setHanging( Integer _aHanging )
    {                    
        String aStringVal = Integer.toString( _aHanging );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "hanging" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:v-ideographic".
     */
    public Integer getVIdeographic()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-ideographic" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:v-ideographic".
     */
    public void setVIdeographic( Integer _aVIdeographic )
    {                    
        String aStringVal = Integer.toString( _aVIdeographic );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-ideographic" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:v-alphabetic".
     */
    public Integer getVAlphabetic()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-alphabetic" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:v-alphabetic".
     */
    public void setVAlphabetic( Integer _aVAlphabetic )
    {                    
        String aStringVal = Integer.toString( _aVAlphabetic );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-alphabetic" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:v-mathematical".
     */
    public Integer getVMathematical()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-mathematical" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:v-mathematical".
     */
    public void setVMathematical( Integer _aVMathematical )
    {                    
        String aStringVal = Integer.toString( _aVMathematical );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-mathematical" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:v-hanging".
     */
    public Integer getVHanging()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-hanging" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:v-hanging".
     */
    public void setVHanging( Integer _aVHanging )
    {                    
        String aStringVal = Integer.toString( _aVHanging );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "v-hanging" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:underline-position".
     */
    public Integer getUnderlinePosition()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "underline-position" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:underline-position".
     */
    public void setUnderlinePosition( Integer _aUnderlinePosition )
    {                    
        String aStringVal = Integer.toString( _aUnderlinePosition );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "underline-position" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:underline-thickness".
     */
    public Integer getUnderlineThickness()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "underline-thickness" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:underline-thickness".
     */
    public void setUnderlineThickness( Integer _aUnderlineThickness )
    {                    
        String aStringVal = Integer.toString( _aUnderlineThickness );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "underline-thickness" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:strikethrough-position".
     */
    public Integer getStrikethroughPosition()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "strikethrough-position" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:strikethrough-position".
     */
    public void setStrikethroughPosition( Integer _aStrikethroughPosition )
    {                    
        String aStringVal = Integer.toString( _aStrikethroughPosition );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "strikethrough-position" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:strikethrough-thickness".
     */
    public Integer getStrikethroughThickness()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "strikethrough-thickness" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:strikethrough-thickness".
     */
    public void setStrikethroughThickness( Integer _aStrikethroughThickness )
    {                    
        String aStringVal = Integer.toString( _aStrikethroughThickness );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "strikethrough-thickness" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:overline-position".
     */
    public Integer getOverlinePosition()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "overline-position" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:overline-position".
     */
    public void setOverlinePosition( Integer _aOverlinePosition )
    {                    
        String aStringVal = Integer.toString( _aOverlinePosition );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "overline-position" ), aStringVal );
    }

    /**
     * Get value of attribute "svg:overline-thickness".
     */
    public Integer getOverlineThickness()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.SVG, "overline-thickness" ) );
        return Integer.valueOf( aStringVal);
    }

    /**
     * Set value of attribute "svg:overline-thickness".
     */
    public void setOverlineThickness( Integer _aOverlineThickness )
    {                    
        String aStringVal = Integer.toString( _aOverlineThickness );
        setOdfAttribute( OdfName.get( OdfNamespace.SVG, "overline-thickness" ), aStringVal );
    }

    /**
     * Get value of attribute "style:name".
     */
    public String getName()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.STYLE, "name" ) );
    }

    /**
     * Set value of attribute "style:name".
     */
    public void setName( String _aName )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.STYLE, "name" ), _aName );
    }

    /**
     * Get value of attribute "style:font-adornments".
     */
    public String getFontAdornments()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-adornments" ) );
    }

    /**
     * Set value of attribute "style:font-adornments".
     */
    public void setFontAdornments( String _aFontAdornments )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-adornments" ), _aFontAdornments );
    }

    /**
     * Get value of attribute "style:font-family-generic".
     */
    public OdfFontFamilyGenericType getFontFamilyGeneric()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-family-generic" ) );
        return OdfFontFamilyGenericType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "style:font-family-generic".
     */
    public void setFontFamilyGeneric( OdfFontFamilyGenericType _aFontFamilyGeneric )
    {                    
        String aStringVal = OdfFontFamilyGenericType.toString( _aFontFamilyGeneric );
        setOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-family-generic" ), aStringVal );
    }

    /**
     * Get value of attribute "style:font-pitch".
     */
    public OdfFontPitchType getFontPitch()
    {                    
        String aStringVal = getOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-pitch" ) );
        return OdfFontPitchType.enumValueOf( aStringVal);
    }

    /**
     * Set value of attribute "style:font-pitch".
     */
    public void setFontPitch( OdfFontPitchType _aFontPitch )
    {                    
        String aStringVal = OdfFontPitchType.toString( _aFontPitch );
        setOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-pitch" ), aStringVal );
    }

    /**
     * Get value of attribute "style:font-charset".
     */
    public String getFontCharset()
    {
        return getOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-charset" ) );
    }

    /**
     * Set value of attribute "style:font-charset".
     */
    public void setFontCharset( String _aFontCharset )
    {
        setOdfAttribute( OdfName.get( OdfNamespace.STYLE, "font-charset" ), _aFontCharset );
    }

}
