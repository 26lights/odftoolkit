
/************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * Use is subject to license terms.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
 * obtain a copy of the License at http://odftoolkit.org/docs/license.txt
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ************************************************************************/

/*
 * This file is automatically generated.
 * Don't edit manually.
 */    

package org.odftoolkit.odfdom.doc.element.office;

import java.util.HashMap;
import java.util.Vector;

import org.odftoolkit.odfdom.doc.OdfFileDom;
import org.odftoolkit.odfdom.doc.element.style.OdfPageLayout;
import org.odftoolkit.odfdom.doc.element.style.OdfStyle;
import org.odftoolkit.odfdom.doc.element.text.OdfListStyle;
import org.odftoolkit.odfdom.dom.element.OdfElement;
import org.odftoolkit.odfdom.dom.element.office.OdfAutomaticStylesElement;
import org.odftoolkit.odfdom.dom.element.style.OdfStyleElement;
import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;
import org.w3c.dom.Node;

/**
 *
 */
public class OdfAutomaticStyles extends OdfAutomaticStylesElement
{
    private HashMap< OdfStyleFamily, HashMap< String, OdfStyle > > mStyles;
    private HashMap< String, OdfPageLayout > mPageLayouts;
    private HashMap< String, OdfListStyle > mListStyles;
    
    public OdfAutomaticStyles( OdfFileDom _aOwnerDoc )
    {
        super( _aOwnerDoc );
    }

    public OdfStyle createStyle(OdfStyleFamily styleFamily)
    {
        OdfFileDom dom = (OdfFileDom)this.ownerDocument;
        OdfStyle newStyle = dom.createOdfElement(OdfStyle.class);
        newStyle.setFamily(styleFamily);
        
        newStyle.setName(createUniqueStyleName(styleFamily));
        
        this.appendChild(newStyle);
        
        return newStyle;
    }

    public OdfListStyle createListStyle()
    {
        OdfFileDom dom = (OdfFileDom)this.ownerDocument;
        OdfListStyle newStyle = dom.createOdfElement(OdfListStyle.class);
        
        newStyle.setName(createUniqueStyleName(OdfStyleFamily.List));
        
        this.appendChild(newStyle);
        
        return newStyle;
    }
    
    /** returns the <style:style> element with the given name and family.
     * 
     * @param name is the name of the style.
     * @param familyType is the family of the style.
     * @return the style or null if there is no such style.
     */
    public OdfStyle getStyle( String name, OdfStyleFamily familyType )
    {
        if( mStyles != null )
        {
            HashMap< String, OdfStyle > familyMap = mStyles.get(familyType);
            if( familyMap != null )
                return familyMap.get( name );                
        }
        return null;
    }

    /**
     * @param familyType
     * @return an iterator for all <style:style-style> elements for the given family.
     */
    public Iterable< OdfStyle > getStylesForFamily( OdfStyleFamily familyType )
    {
        if( mStyles != null )
        {
            HashMap< String, OdfStyle > familyMap = mStyles.get(familyType);
            if( familyMap != null )
                return familyMap.values();
        }
        return new Vector< OdfStyle >();
    }

    /** returns the <style:list-style> element with the given name
     * 
     * @param name is the name of the list-style
     * @return the list style or null if there is no such list style
     */
    public OdfListStyle getListStyle( String name )
    {
        if( mListStyles != null )
            return mListStyles.get(name);
        else
            return null;
    }
    
    /**
     * @return an iterator for all <style:list-style> elements.
     */
    public Iterable< OdfListStyle > getListStyles()
    {
        if( mListStyles != null )
            return mListStyles.values();
        else
            return new Vector< OdfListStyle >();
    }

    public OdfPageLayout getPageLayout( String name )
    {
        if( mPageLayouts != null )
            return mPageLayouts.get(name);
        else
            return null;
    }

    public OdfStyle makeStyleUnique(OdfStyle referenceStyle)
    {
        OdfStyle newStyle = null;


        if( referenceStyle.getOwnerDocument() != this.getOwnerDocument() )
        {
            // import style from a different dom
            newStyle = (OdfStyle)this.getOwnerDocument().importNode(referenceStyle, true);
        }
        else
        {
            // just clone
            newStyle = (OdfStyle)referenceStyle.cloneNode(true);
        }
        
        newStyle.setName(createUniqueStyleName(newStyle.getFamily()));
        appendChild(newStyle);
        
        return newStyle;
    }

    protected void onOdfNodeInserted( OdfElement node, Node refNode )
    {
        if( node instanceof OdfStyle )
        {
            OdfStyle style = (OdfStyle)node;
            if( mStyles == null )
                mStyles = new HashMap< OdfStyleFamily, HashMap< String, OdfStyle > >();
            
            HashMap< String, OdfStyle > familyMap = mStyles.get(style.getFamily());
            if( familyMap == null )
            {
                familyMap = new HashMap< String, OdfStyle >();
                mStyles.put( style.getFamily(), familyMap );
            }
            
            familyMap.put( style.getName(), style);
        }
        else if( node instanceof OdfListStyle )
        {
            OdfListStyle listStyle = (OdfListStyle)node;
            if( mListStyles == null )
                mListStyles = new HashMap< String, OdfListStyle >();
            
            mListStyles.put(listStyle.getName(), listStyle);
        }       
        else if( node instanceof OdfPageLayout )
        {
            OdfPageLayout pageLayout = (OdfPageLayout)node;
            if( mPageLayouts == null )
                mPageLayouts = new HashMap< String, OdfPageLayout >();
            
            mPageLayouts.put(pageLayout.getName(), pageLayout);
        }
    }
    
    protected void onOdfNodeRemoved( OdfElement node )
    {
        if( node instanceof OdfStyle )
        {
            if( mStyles != null )
            {
                OdfStyle style = (OdfStyle)node;
                HashMap< String, OdfStyle > familyMap = mStyles.get(style.getFamily());
                if( familyMap != null )
                {
                    familyMap.remove(style.getName());
                    if( familyMap.isEmpty() )
                        mStyles.remove(style.getFamily());
                }
            }
        }
        else if( node instanceof OdfListStyle )
        {
            if( mListStyles != null )
            {
                OdfListStyle listStyle = (OdfListStyle)node;
                mListStyles.remove(listStyle.getName());
            }
        }
        else if( node instanceof OdfPageLayout )
        {
            if( mPageLayouts != null )
            {
                OdfPageLayout pageLayout = (OdfPageLayout)node;
                mPageLayouts.remove(pageLayout.getName());
            }
        }
    }

    private String createUniqueStyleName(OdfStyleFamily styleFamily)
    {
        String unique_name;
        
        if( styleFamily.equals( OdfStyleFamily.List) )
        {
            do
            {
                unique_name = String.format("l%06x", (int)(Math.random() * 0xffffff));
            } while( getListStyle( unique_name ) != null );            
        }
        else
        {
            do
            {
                unique_name = String.format("a%06x", (int)(Math.random() * 0xffffff));
            } while( getStyle( unique_name, styleFamily) != null );
        }
        return unique_name;
    }

    /** this methods removes all automatic styles that are currently not used by any styleable element.
     *  Todo: In the future this could also merge automatic styles with identical content.
     */
    public void optimize()
    {
        OdfStyle style = OdfElement.findFirstChildNode( OdfStyle.class, this );
        while( style != null )
        {
            OdfStyle nextStyle = OdfElement.findNextChildNode(OdfStyle.class, style);
            if( style.getStyleUserCount() < 1 )
            {
                this.removeChild(style);
            }

            style = nextStyle;            
        }
    }
}
