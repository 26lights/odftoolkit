## Template to create the Java class representing an ODF element
##
## Documentation of template development can be found in local file
## TemplateHelp.html.
##
#set ($element = ${model.getElement($context)} )
#set ($oldelement = ${oldmodel.getElement($context)} )
#set ($NS = ${element.getNamespace()})
#set ($classname = "${model.camelCase($element)}Element" )
##
## Set child element and child attributes
#set ($children = ${element.getChildElements().withoutMultiples()})
#set ($attributes = ${element.getAttributes().withoutMultiples()})
##
## Determine whether element is stylable. Set base class OdfElement, OdfStylableElement, or...
#if ($odfmodel.isStylable($element))
#set ($stylable = true)
#set ($baseclassname = "OdfStylableElement" )
#set ($firstfamily = ${model.camelCase($model.extractLocalname($odfmodel.getStyleFamilies($element).get(0)))} )
#else
#set ($stylable = false)
#set ($baseclassname = "OdfElement" )
#end
##
## ...or configured base class
#if (${javamodel.getBaseclassOf($element)})
#set ($base = ${javamodel.getBaseclassOf($element)})
## Configured manually generated base class?
#if ($base == "container" )
#set ($_specialbase = true)
#set ($baseclassname = "OdfContainerElementBase")
#set ($baseimport = "org.odftoolkit.odfdom.$baseclassname")
#end
#if ($base == "style" )
#set ($_specialbase = true)
#set ($baseclassname = "OdfStyleBase")
#set ($baseimport = "org.odftoolkit.odfdom.dom.element.$baseclassname")
#end
#if ($base == "styleproperties" )
#set ($_specialbase = true)
#set ($baseclassname = "OdfStylePropertiesBase")
#set ($baseimport = "org.odftoolkit.odfdom.dom.element.$baseclassname")
#end
## Configured automatic generated base class. If so, remove all attributes defined in base class
#if (!$_specialbase)
#set ($baseclassname = "${model.camelCase($base)}ElementBase" )
#if ( $base.getNamespace() != $NS )
#set ($baseimport = "org.odftoolkit.odfdom.dom.element.${base.getNamespace()}.$baseclassname")
#end
#set ($attributes = $attributes.without($base.getBaseAttributes())) 
#end
#end
##
## Begin Code
#include( 'copyright.txt' )
/*
 * This file is automatically generated.
 * Don't edit manually.
 */

package org.odftoolkit.odfdom.dom.element.${NS};

##
## ---------------------------------------------------
##  Imports
## ---------------------------------------------------
##
#if ($stylable)
import org.odftoolkit.odfdom.dom.element.OdfStylableElement;
import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;
#else
import org.odftoolkit.odfdom.OdfElement;
#end
#if ($base == "styleproperties")
import org.odftoolkit.odfdom.dom.style.props.OdfStyleProperty;
import org.odftoolkit.odfdom.dom.style.props.OdfStylePropertiesSet;
#end
import org.odftoolkit.odfdom.OdfFileDom;
import org.odftoolkit.odfdom.OdfName;
import org.odftoolkit.odfdom.OdfNamespace;
import org.odftoolkit.odfdom.dom.OdfNamespaceNames;
#foreach ( $child in $children )
#if ($child == "*")
#set ($anychild = true)
#else
#set($childNS = ${child.getNamespace()})
#set($childClassname = "${model.camelCase($child)}Element" )
#if ($childNS != $NS)
import org.odftoolkit.odfdom.dom.element.${childNS}.$childClassname;
#end
#end
#end
##
#foreach ( $child in $attributes )
#if ($child == "*")
#set ($anyattribute = true)
#else
#set($childNS = ${child.getNamespace()})
#set($childClassname = "${model.camelCase($child)}Attribute" )
import org.odftoolkit.odfdom.dom.attribute.${childNS}.$childClassname;
#end
#end
##
## If there is a base class which is not in the current package
#if ($baseimport)
import ${baseimport};
#end

##
## ---------------------------------------------------
##  Class
## ---------------------------------------------------
##
/**
 * DOM implementation of OpenDocument element  {@odf.element ${context}}.
 *
#if ($anychild)
 * This class can have any org.w3c.dom.Element child element.
#end
#if ($anyattribute)
 * This class can have any org.w3c.dom.Attribute attribute.
#end
 */
public abstract class $classname extends $baseclassname {

	public static final OdfName ELEMENT_NAME = OdfName.get(OdfNamespace.get(OdfNamespaceNames.${NS.toUpperCase()}), "${element.getLocalName()}");
	
	/**
	 * Create the instance of <code>$classname</code> 
	 *
	 * @param  ownerDoc     The type is <code>OdfFileDom</code>
	 */
	public $classname( OdfFileDom ownerDoc )
	{
#if ($stylable)
		super( ownerDoc, ELEMENT_NAME, OdfStyleFamily.${firstfamily}, OdfName.get( OdfNamespace.get(OdfNamespaceNames.${NS.toUpperCase()}), "style-name" ));
#else
		super( ownerDoc, ELEMENT_NAME );
#end
	}

	/**
	 * Get the element name 
	 *
	 * @return  return   <code>OdfName</code> the name of element {@odf.element ${odfName}}.
	 */
	public OdfName getOdfName()
	{
		return ELEMENT_NAME;
	}

## ---------------------------------------------------
##  Only for base = styleproperties
## ---------------------------------------------------
#if ($base == "styleproperties" )
#foreach ($attribute in $attributes)
#if ($attribute != "*")
 public final static OdfStyleProperty ${model.camelCase($attribute)} = 
        OdfStyleProperty.get(OdfStylePropertiesSet.${model.camelCase($element.getLocalName())}, OdfName.get( OdfNamespace.get(OdfNamespaceNames.${model.firstWord($element).toUpperCase()}), "${attribute.getLocalName()}"));
	
#end
#end
#end
##
## ---------------------------------------------------
##  Attribute getters and setters
## ---------------------------------------------------
##
#foreach ( $attr in $attributes )
#if ($attr != "*")
#set($attribute = ${attr.withMultiples()})
#set($aNS = ${attribute.getNamespace()} )
#set($aClassname = "${model.camelCase($attribute)}Attribute" )
#set($aParam = "${model.javaCase($attribute)}Value" )
	/**
	 * Receives the value of the ODFDOM attribute representation <code>$aClassname</code> , See {@odf.attribute ${attribute.getQName()}}
	 *
#if ( ${element.isMandatory($attribute)} )
	 * Attribute is mandatory.
	 *
#end
	 * @return - the <code>String</code> , the value or <code>null</code>, if the attribute is not set and no default value defined.
	 */
	public String get${aClassname}() {
		$aClassname attr = ($aClassname) getOdfAttribute( OdfName.get( OdfNamespace.get(OdfNamespaceNames.${aNS.toUpperCase()}), "${attribute.getLocalName()}" ) );
		if( attr != null ){
			return attr.getValue();
		}
#if ( $odfmodel.getDefaultAttributeValue($attribute, $element) )
		return "${model.escapeLiteral($odfmodel.getDefaultAttributeValue($attribute, $element))}";
#else
		return null;
#end
	}

	/**
	 * Sets the value of ODFDOM attribute representation <code>$aClassname</code> , See {@odf.attribute ${attribute.getQName()}}
	 *
#if ( ${element.isMandatory($attribute)} )
	 * Attribute is mandatory.
	 *
#end
	 * @param $aParam   The type is <code>String</code>
	 */
	public void set${aClassname}( String $aParam )
	{
		$aClassname attr =  new ${aClassname}( (OdfFileDom)this.ownerDocument );
		setOdfAttribute( attr );
		attr.setValue( $aParam );
	}

#end
#end

##
## ---------------------------------------------------
##  Methods for child element creation
## ---------------------------------------------------
##
#foreach( $ch in $children )
#if ($ch != "*")
#set($child = ${ch.withMultiples()})
#set($cClassname = "${model.camelCase($child)}Element" )
#set($cVar = ${model.javaCase($child)} )
	/**
	 * Create child element {@odf.element ${child}}.
	 *
## Compare element from old and new Spec. A direct comparison is not possible (both encapsulate different RelaxNG Expressions)
## but we can compare by name
#if ( !$oldelement || !${oldelement.getChildElements().containsName($child)} )
	 * Child element is new in Odf 1.2
	 *
#end
#if ( ${element.isMandatory($child)} )
	 * Child element is mandatory.
	 *
#end
	 * @return the element {@odf.element ${child}}
	 */
	public $cClassname new${cClassname}() {
		$cClassname $cVar = ((OdfFileDom)this.ownerDocument).newOdfElement(${cClassname}.class);
		this.appendChild($cVar);
		return $cVar;
	}
	
#end
#end

##
##
## -----------------------------------------------------
##  New: newTextNode
## -----------------------------------------------------
#if ( $element.canHaveText() )
	/**
	 * Add text content. Only elements which are allowed to have text content offer this method.
	 */
	 public void newTextNode(String content) {
	 	if (content != null && !content.equals("")) {
			this.appendChild(this.getOwnerDocument().createTextNode(content));
		}
	 }
#end
}
