## Template to create the Java class representing an ODF element.
##
## Documentation of template development can be found in local file
## TemplateHelp.html.
##
#set ($base = $javamodel.getBaseclass($context))
#set($classname = "${model.camelCase($base)}ElementBase" )
##
## Set Superclass
#if (${base.isStylable()})
#set ($superclass = 'OdfStylableElement' )
#else
#set ($superclass = 'OdfElement' )
#end
##
## Begin Code
#include( 'copyright.txt' )
/*
 * This file is automatically generated.
 * Don't edit manually.
 */

package org.odftoolkit.odfdom.dom.element.${base.getNamespace()};

##
## ---------------------------------------------------
##  Imports
## ---------------------------------------------------
##
import org.odftoolkit.odfdom.OdfElement;
import org.odftoolkit.odfdom.dom.element.OdfStylableElement;
import org.odftoolkit.odfdom.dom.style.OdfStyleFamily;
import org.odftoolkit.odfdom.OdfFileDom;
import org.odftoolkit.odfdom.OdfName;
import org.odftoolkit.odfdom.OdfNamespace;
import org.odftoolkit.odfdom.dom.OdfNamespaceNames;
#foreach ( $attribute in ${base.getBaseAttributes().withoutMultiples()} )
#if ($attribute == "*")
#set ($anyattribute = true)
#else
import org.odftoolkit.odfdom.dom.attribute.${attribute.getNamespace()}.${model.camelCase($attribute)}Attribute;
#end
#end

##
## ---------------------------------------------------
##  Class
## ---------------------------------------------------
##
/**
 * DOM implementation of OpenDocument base element 
 *
#if ($anyattribute)
 * This class can have any org.w3c.dom.Attribute attribute.
#end
 */
public abstract class $classname extends $superclass {

	/**
	 * Create the instance of <code>$classname</code> 
	 *
	 * @param  ownerDoc     The type is <code>OdfFileDom</code>
	 */
#if (${base.isStylable()})
	public $classname( OdfFileDom ownerDoc, OdfName elementName, OdfStyleFamily styleFamily, OdfName styleAttrName )
	{
		super( ownerDoc, elementName, styleFamily, styleAttrName );
	}
#else
	public $classname( OdfFileDom ownerDoc, OdfName elementName )
	{
		super( ownerDoc, elementName );
	}
#end

##
## ---------------------------------------------------
##  Attribute getters and setters
## ---------------------------------------------------
##
#foreach ( $attribute in ${base.getBaseAttributes().withoutMultiples()} )
#if ($attribute != "*")
#set($aClassname = "${model.camelCase($attribute)}Attribute" )
#set($aParam = "${model.javaCase($attribute)}Value" )
	/**
	 * Receives the value of the ODFDOM attribute representation <code>$aClassname</code> , See {@odf.attribute ${attribute}}
	 *
	 * @return - the <code>String</code> , the value or <code>null</code>, if the attribute is not set and no default value defined.
	 */
	public String get${aClassname}() {
		$aClassname attr = ($aClassname) getOdfAttribute( OdfName.get( OdfNamespace.get(OdfNamespaceNames.${attribute.getNamespace().toUpperCase()}), "$attribute.getLocalName()" ) );
		if( attr != null ){
			return String.valueOf( attr.getValue() );
		}
		return null;
	}

	/**
	 * Sets the value of ODFDOM attribute representation <code>SvgRAttribute</code> , See {@odf.attribute ${attribute}}
	 *
	 * @param $aParam   The type is <code>String</code>
	 */
	public void set${aClassname}( String $aParam )
	{
		$aClassname attr =  new ${aClassname}( (OdfFileDom)this.ownerDocument );
		setOdfAttribute( attr );
		attr.setValue( $aParam );
	}

#end
#end
}
