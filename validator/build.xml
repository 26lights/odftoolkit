<?xml version="1.0" encoding="UTF-8"?>
<!--

  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER

  Copyright 2008, 2010 Oracle and/or its affiliates. All rights reserved.

  Use is subject to license terms.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. You can also
  obtain a copy of the License at http://odftoolkit.org/docs/license.txt

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

  See the License for the specific language governing permissions and
  limitations under the License.

-->

<project name="ODFValidator" default="default" basedir=".">
    <description>Builds, tests, and runs the project ODFValidator.</description>
    <import file="nbproject/build-impl.xml"/>

    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

    -pre-init:                 called before initialization of project properties
    -post-init:                called after initialization of project properties
    -pre-compile:              called before javac compilation
    -post-compile:             called after javac compilation
    -pre-compile-single:       called before javac compilation of single file
    -post-compile-single:      called after javac compilation of single file
    -pre-compile-test:         called before javac compilation of JUnit tests
    -post-compile-test:        called after javac compilation of JUnit tests
    -pre-compile-test-single:  called before javac compilation of single JUnit test
    -post-compile-test-single: called after javac compilation of single JUunit test
    -pre-jar:                  called before JAR building
    -post-jar:                 called after JAR building
    -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

    <target name="-post-compile">
    <obfuscate>
    <fileset dir="${build.classes.dir}"/>
    </obfuscate>
    </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

    -init-macrodef-javac:     defines macro for javac compilation
    -init-macrodef-junit:     defines macro for junit execution
    -init-macrodef-debug:     defines macro for class debugging
    -init-macrodef-java:      defines macro for class execution
    -do-jar-with-manifest:    JAR building (if you are using a manifest)
    -do-jar-without-manifest: JAR building (if you are not using a manifest)
    run:                      execution of project 
    -javadoc-build:           Javadoc generation
    test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

    <target name="run" depends="ODFValidator-impl.jar">
    <exec dir="bin" executable="launcher.exe">
    <arg file="${dist.jar}"/>
    </exec>
    </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

    <property file="schema.user.properties"/>
    <property file="schema.properties"/>

    <property name="opendocument.v10.schema" value="OpenDocument-schema-v1.0${opendocument.v10.schema.state}.rng"/>
    <property name="opendocument.v10.schema.strict" value="OpenDocument-strict-schema-v1.0${opendocument.v10.schema.state}.rng"/>
    <property name="opendocument.v10.schema.manifest" value="OpenDocument-manifest-schema-v1.0${opendocument.v10.schema.state}.rng"/>
    <property name="opendocument.v11.schema" value="OpenDocument-schema-v1.1${opendocument.v11.schema.state}.rng"/>
    <property name="opendocument.v11.schema.strict" value="OpenDocument-strict-schema-v1.1${opendocument.v11.schema.state}.rng"/>
    <property name="opendocument.v11.schema.manifest" value="OpenDocument-manifest-schema-v1.1${opendocument.v11.schema.state}.rng"/>
    <property name="opendocument.v12.schema" value="OpenDocument-v1.2${opendocument.v12.part1.schema.state}-schema.rng"/>
    <property name="opendocument.v12.schema.manifest" value="OpenDocument-v1.2${opendocument.v12.part3.schema.state}-manifest-schema.rng"/>
    <property name="opendocument.v12.schema.dsig" value="OpenDocument-v1.2${opendocument.v12.part3.schema.state}-dsig-schema.rng"/>

    <target name="-pre-jar" depends="init,-copy-v10-schema,-copy-v11-schema,-copy-v12-schema,-copy-mathml-schema,-copy-mathml2-schema,-create-v10-validator-config,-create-v11-validator-config,-create-v12-validator-config"/>

       
    <target name="-copy-v10-schema" depends="init">
        <xslt style="xslt/fix_rng_for_msv.xsl" 
                    in="${opendocument.v10.schema.dir}/${opendocument.v10.schema}" 
                    out="${build.classes.dir}/schema/odf10/${opendocument.v10.schema}"/>  
        <copy todir="${build.classes.dir}/schema/odf10">
            <fileset dir="${opendocument.v10.schema.dir}"
                includes="${opendocument.v10.schema.strict},${opendocument.v10.schema.manifest}"/>
        </copy>
    </target>

    <target name="-copy-v11-schema" depends="init">
        <xslt style="xslt/fix_rng_for_msv.xsl" 
                    in="${opendocument.v11.schema.dir}/${opendocument.v11.schema}" 
                    out="${build.classes.dir}/schema/odf11/${opendocument.v11.schema}"/>  
        <copy todir="${build.classes.dir}/schema/odf11">
            <fileset dir="${opendocument.v11.schema.dir}"
                includes="${opendocument.v11.schema.strict},${opendocument.v11.schema.manifest}"/>
        </copy>
    </target>

    <target name="-copy-v12-schema" depends="init">
        <xslt style="xslt/fix_rng_for_msv.xsl" 
                    in="${opendocument.v12.part1.schema.dir}/${opendocument.v12.schema}"
                    out="${build.classes.dir}/schema/odf12/${opendocument.v12.schema}"/>  
        <copy todir="${build.classes.dir}/schema/odf12">
            <fileset dir="${opendocument.v12.part3.schema.dir}" includes="${opendocument.v12.schema.manifest},${opendocument.v12.schema.dsig}"/>
        </copy>
    </target>

    <target name="-copy-mathml-schema" depends="init">
        <copy todir="${build.classes.dir}/schema/mathml">
            <fileset dir="${mathml.schema.dir}" includes="*.dtd *.ent"/>
        </copy>
    </target>

    <target name="-copy-mathml2-schema" depends="init">
        <copy todir="${build.classes.dir}/schema/mathml2">
            <fileset dir="${mathml2.schema.dir}" includes="*.xsd **/*.xsd"/>
        </copy>
    </target>

    <target name="-create-v10-validator-config" depends="init">
        <antcall target="-create-validator-config">
            <param name="config.file" value="${build.classes.dir}/config/v10.properties"/>
            <param name="schema" value="schema/odf10/${opendocument.v10.schema}"/>
            <param name="strict-schema" value="schema/odf10/${opendocument.v10.schema.strict}"/>
            <param name="manifest-schema" value="schema/odf10/${opendocument.v10.schema.manifest}"/>
            <param name="mathml-schema" value="schema/mathml/math.dtd"/>
            <param name="mathml2-schema" value="schema/mathml2/mathml2.xsd"/>
        </antcall>
    </target>

    <target name="-create-v11-validator-config" depends="init">
        <antcall target="-create-validator-config">
            <param name="config.file" value="${build.classes.dir}/config/v11.properties"/>
            <param name="schema" value="schema/odf11/${opendocument.v11.schema}"/>
            <param name="strict-schema" value="schema/odf11/${opendocument.v11.schema.strict}"/>
            <param name="manifest-schema" value="schema/odf11/${opendocument.v11.schema.manifest}"/>
            <param name="mathml-schema" value="schema/mathml/math.dtd"/>
            <param name="mathml2-schema" value="schema/mathml2/mathml2.xsd"/>
        </antcall>
    </target>

    <target name="-create-v12-validator-config" depends="init">
        <antcall target="-create-validator-config">
            <param name="config.file" value="${build.classes.dir}/config/v12.properties"/>
            <param name="schema" value="schema/odf12/${opendocument.v12.schema}"/>
            <param name="strict-schema" value="schema/odf12/${opendocument.v12.schema}"/>
            <param name="manifest-schema" value="schema/odf12/${opendocument.v12.schema.manifest}"/>
            <param name="dsig-schema" value="schema/odf12/${opendocument.v12.schema.dsig}"/>
            <param name="mathml-schema" value="schema/mathml/math.dtd"/>
            <param name="mathml2-schema" value="schema/mathml2/mathml2.xsd"/>
        </antcall>
    </target>

    <target name="-create-validator-config" depends="init">
        <condition property="dsig-schema-param" value="${dsig-schema}" else="">
            <isset property="dsig-schema" />
        </condition>
        <condition property="path-param" value="${path}" else="">
            <isset property="path" />
        </condition>
        <condition property="filter-param" value="${filter}" else="">
            <isset property="filter" />
        </condition>
        <xslt style="xslt/create_config.xsl" 
                    in="misc/config_template.properties" 
                    out="${config.file}">
            <param name="schema" expression="${schema}"/>
            <param name="strict-schema" expression="${strict-schema}"/>
            <param name="manifest-schema" expression="${manifest-schema}"/>
            <param name="mathml-schema" expression="${mathml-schema}"/>
            <param name="dsig-schema" expression="${dsig-schema-param}"/>
            <param name="mathml-schema" expression="${mathml-schema}"/>
            <param name="mathml2-schema" expression="${mathml2-schema}"/>
            <param name="path" expression="${path-param}"/>
            <param name="filter" expression="${filter-param}"/>
        </xslt >
    </target>

    <!--
    <target name="test" depends="jar" description="Test ODFValidator">
        <condition property="mathml.dtd.option" value="" else="-d">
            <istrue value="${use.mathml2.xsd}"/>
        </condition>
        <java jar="${dist.jar}" fork="true">
            <sysproperty key="javax.xml.validation.SchemaFactory:http://relaxng.org/ns/structure/1.0" value="org.iso_relax.verifier.jaxp.validation.RELAXNGSchemaFactoryImpl"/>
            <sysproperty key="org.iso_relax.verifier.VerifierFactoryLoader" value="com.sun.msv.verifier.jarv.FactoryLoaderImpl"/>
            <arg value="-v"/>
            <arg value="${mathml.dtd.option}"/>
            <arg value="${testdocs.dir}"/>
        </java>
    </target>
    -->

    <!-- running the tests needs the built jar, so add a dependence here -->
    <target name="-post-compile-test" depends="jar"/>
    <target name="-post-compile-test-single" depends="jar"/>

</project>



